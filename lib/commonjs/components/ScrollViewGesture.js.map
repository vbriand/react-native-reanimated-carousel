{"version":3,"sources":["ScrollViewGesture.tsx"],"names":["IScrollViewGesture","props","onConfigurePanGesture","vertical","pagingEnabled","snapEnabled","loop","scrollAnimationDuration","withAnimation","enabled","dataLength","overscrollEnabled","maxScrollDistancePerSwipe","minScrollDistancePerSwipe","fixedDirection","React","useContext","CTX","size","translation","testID","style","onScrollStart","onScrollEnd","onTouchBegin","onTouchEnd","accessibilityActions","accessible","accessibilityLabel","onAccessibilityAction","maxPage","isHorizontal","max","panOffset","touching","validStart","scrollEndTranslation","scrollEndVelocity","containerRef","maxScrollDistancePerSwipeIsSet","minScrollDistancePerSwipeIsSet","getLimit","useCallback","width","containerWidth","withSpring","toValue","onFinished","defaultWithAnimation","type","config","duration","easing","Easing","easeOutQuart","isFinished","endWithSpring","origin","value","velocity","finalTranslation","deceleration","Math","abs","offset","computed","ceil","floor","page","finalPage","withProcessTranslation","min","nextPage","round","limit","sign","onFinish","activeDecay","resetBoundary","onGestureStart","_","onGestureUpdate","e","translationX","translationY","panTranslation","boundary","fixed","dynamic","translationValue","onGestureEnd","_success","velocityX","velocityY","totalTranslation","gesture","options","children","ScrollViewGesture"],"mappings":"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","sourcesContent":["import type { PropsWithChildren } from \"react\";\nimport React, { useCallback } from \"react\";\nimport type { AccessibilityProps, StyleProp, ViewStyle } from \"react-native\";\nimport type {\n  GestureStateChangeEvent,\n  PanGestureHandlerEventPayload,\n} from \"react-native-gesture-handler\";\nimport { GestureDetector } from \"react-native-gesture-handler\";\nimport Animated, {\n  cancelAnimation,\n  measure,\n  runOnJS,\n  useAnimatedReaction,\n  useAnimatedRef,\n  useDerivedValue,\n  useSharedValue,\n  withDecay,\n} from \"react-native-reanimated\";\n\nimport { Easing } from \"../constants\";\nimport { usePanGestureProxy } from \"../hooks/usePanGestureProxy\";\nimport { CTX } from \"../store\";\nimport type { WithTimingAnimation } from \"../types\";\nimport { dealWithAnimation } from \"../utils/deal-with-animation\";\n\ninterface Props {\n  size: number\n  infinite?: boolean\n  testID?: string\n  style?: StyleProp<ViewStyle>\n  onScrollStart?: () => void\n  onScrollEnd?: () => void\n  onTouchBegin?: () => void\n  onTouchEnd?: () => void\n  translation: Animated.SharedValue<number>\n  accessibilityActions: AccessibilityProps[\"accessibilityActions\"]\n  accessible: AccessibilityProps[\"accessible\"]\n  accessibilityLabel: AccessibilityProps[\"accessibilityLabel\"]\n  onAccessibilityAction: AccessibilityProps[\"onAccessibilityAction\"]\n}\n\nconst IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {\n  const {\n    props: {\n      onConfigurePanGesture,\n      vertical,\n      pagingEnabled,\n      snapEnabled,\n      loop,\n      scrollAnimationDuration,\n      withAnimation,\n      enabled,\n      dataLength,\n      overscrollEnabled,\n      maxScrollDistancePerSwipe,\n      minScrollDistancePerSwipe,\n      fixedDirection,\n    },\n  } = React.useContext(CTX);\n\n  const {\n    size,\n    translation,\n    testID,\n    style = {},\n    onScrollStart,\n    onScrollEnd,\n    onTouchBegin,\n    onTouchEnd,\n    accessibilityActions,\n    accessible,\n    accessibilityLabel,\n    onAccessibilityAction,\n  } = props;\n\n  const maxPage = dataLength;\n  const isHorizontal = useDerivedValue(() => !vertical, [vertical]);\n  const max = useSharedValue(0);\n  const panOffset = useSharedValue(0);\n  const touching = useSharedValue(false);\n  const validStart = useSharedValue(false);\n  const scrollEndTranslation = useSharedValue(0);\n  const scrollEndVelocity = useSharedValue(0);\n  const containerRef = useAnimatedRef<Animated.View>();\n  const maxScrollDistancePerSwipeIsSet\n        = typeof maxScrollDistancePerSwipe === \"number\";\n  const minScrollDistancePerSwipeIsSet\n        = typeof minScrollDistancePerSwipe === \"number\";\n\n  // Get the limit of the scroll.\n  const getLimit = React.useCallback(() => {\n    \"worklet\";\n\n    if (!loop && !overscrollEnabled) {\n      const { width: containerWidth = 0 } = measure(containerRef);\n\n      // If the item's total width is less than the container's width, then there is no need to scroll.\n      if (dataLength * size < containerWidth) return 0;\n\n      // Disable the \"overscroll\" effect\n      return dataLength * size - containerWidth;\n    }\n\n    return dataLength * size;\n  }, [loop, size, dataLength, overscrollEnabled]);\n\n  const withSpring = React.useCallback(\n    (toValue: number, onFinished?: () => void) => {\n      \"worklet\";\n      const defaultWithAnimation: WithTimingAnimation = {\n        type: \"timing\",\n        config: {\n          duration: scrollAnimationDuration + 100,\n          easing: Easing.easeOutQuart,\n        },\n      };\n\n      return dealWithAnimation(withAnimation ?? defaultWithAnimation)(\n        toValue,\n        (isFinished: boolean) => {\n          \"worklet\";\n          if (isFinished) onFinished && runOnJS(onFinished)();\n        },\n      );\n    },\n    [scrollAnimationDuration, withAnimation],\n  );\n\n  const endWithSpring = React.useCallback(\n    (onFinished?: () => void) => {\n      \"worklet\";\n      const origin = translation.value;\n      const velocity = scrollEndVelocity.value;\n      // Default to scroll in the direction of the slide (with deceleration)\n      let finalTranslation: number = withDecay({\n        velocity,\n        deceleration: 0.999,\n      });\n\n      // If the distance of the swipe exceeds the max scroll distance, keep the view at the current position\n      if (\n        maxScrollDistancePerSwipeIsSet\n                && Math.abs(scrollEndTranslation.value) > maxScrollDistancePerSwipe\n      ) {\n        finalTranslation = origin;\n      }\n      else {\n        /**\n                 * The page size is the same as the item size.\n                 * If direction is vertical, the page size is the height of the item.\n                 * If direction is horizontal, the page size is the width of the item.\n                 *\n                 * `page size` equals to `size` variable.\n                 * */\n        if (pagingEnabled) {\n          // distance with direction\n          const offset = -(scrollEndTranslation.value >= 0 ? 1 : -1); // 1 or -1\n          const computed = offset < 0 ? Math.ceil : Math.floor;\n          const page = computed(-translation.value / size);\n\n          if (loop) {\n            const finalPage = page + offset;\n            finalTranslation = withSpring(\n              withProcessTranslation(-finalPage * size),\n              onFinished,\n            );\n          }\n          else {\n            const finalPage = Math.min(\n              maxPage - 1,\n              Math.max(0, page + offset),\n            );\n            finalTranslation = withSpring(\n              withProcessTranslation(-finalPage * size),\n              onFinished,\n            );\n          }\n        }\n\n        if (!pagingEnabled && snapEnabled) {\n          // scroll to the nearest item\n          const nextPage\n                        = Math.round((origin + velocity * 0.4) / size) * size;\n          finalTranslation = withSpring(\n            withProcessTranslation(nextPage),\n            onFinished,\n          );\n        }\n      }\n\n      translation.value = finalTranslation;\n\n      function withProcessTranslation(translation: number) {\n        if (!loop && !overscrollEnabled) {\n          const limit = getLimit();\n          const sign = Math.sign(translation);\n          return (\n            sign\n                        * Math.max(0, Math.min(limit, Math.abs(translation)))\n          );\n        }\n\n        return translation;\n      }\n    },\n    [\n      withSpring,\n      size,\n      maxPage,\n      loop,\n      snapEnabled,\n      translation,\n      pagingEnabled,\n      scrollEndVelocity.value,\n      maxScrollDistancePerSwipe,\n      scrollEndTranslation.value,\n      maxScrollDistancePerSwipeIsSet,\n    ],\n  );\n\n  const onFinish = React.useCallback(\n    (isFinished: boolean) => {\n      \"worklet\";\n      if (isFinished) {\n        touching.value = false;\n        onScrollEnd && runOnJS(onScrollEnd)();\n      }\n    },\n    [onScrollEnd, touching],\n  );\n\n  const activeDecay = React.useCallback(() => {\n    \"worklet\";\n    touching.value = true;\n    translation.value = withDecay(\n      { velocity: scrollEndVelocity.value },\n      isFinished => onFinish(isFinished as boolean),\n    );\n  }, [onFinish, scrollEndVelocity.value, touching, translation]);\n\n  const resetBoundary = React.useCallback(() => {\n    \"worklet\";\n    if (touching.value) return;\n\n    if (translation.value > 0) {\n      if (scrollEndTranslation.value < 0) {\n        activeDecay();\n        return;\n      }\n      if (!loop) {\n        translation.value = withSpring(0);\n        return;\n      }\n    }\n\n    if (translation.value < -((maxPage - 1) * size)) {\n      if (scrollEndTranslation.value > 0) {\n        activeDecay();\n        return;\n      }\n      if (!loop) translation.value = withSpring(-((maxPage - 1) * size));\n    }\n  }, [\n    touching.value,\n    translation,\n    maxPage,\n    size,\n    scrollEndTranslation.value,\n    loop,\n    activeDecay,\n    withSpring,\n  ]);\n\n  useAnimatedReaction(\n    () => translation.value,\n    () => {\n      if (!pagingEnabled) resetBoundary();\n    },\n    [pagingEnabled, resetBoundary],\n  );\n\n  function withProcessTranslation(translation: number) {\n    \"worklet\";\n\n    if (!loop && !overscrollEnabled) {\n      const limit = getLimit();\n      const sign = Math.sign(translation);\n      return sign * Math.max(0, Math.min(limit, Math.abs(translation)));\n    }\n\n    return translation;\n  }\n\n  const onGestureStart = useCallback(\n    (_: PanGestureHandlerEventPayload) => {\n      \"worklet\";\n\n      touching.value = true;\n      validStart.value = true;\n      onScrollStart && runOnJS(onScrollStart)();\n\n      max.value = (maxPage - 1) * size;\n      if (!loop && !overscrollEnabled) max.value = getLimit();\n\n      panOffset.value = translation.value;\n    },\n    [\n      max,\n      size,\n      maxPage,\n      loop,\n      touching,\n      panOffset,\n      validStart,\n      translation,\n      overscrollEnabled,\n      getLimit,\n      onScrollStart,\n    ],\n  );\n\n  const onGestureUpdate = useCallback(\n    (e: PanGestureHandlerEventPayload) => {\n      \"worklet\";\n\n      if (validStart.value) {\n        validStart.value = false;\n        cancelAnimation(translation);\n      }\n      touching.value = true;\n      const { translationX, translationY } = e;\n\n      let panTranslation = isHorizontal.value\n        ? translationX\n        : translationY;\n\n      if (fixedDirection === \"negative\")\n        panTranslation = -Math.abs(panTranslation);\n      else if (fixedDirection === \"positive\")\n        panTranslation = +Math.abs(panTranslation);\n\n      if (!loop) {\n        if (translation.value > 0 || translation.value < -max.value) {\n          const boundary = translation.value > 0 ? 0 : -max.value;\n          const fixed = boundary - panOffset.value;\n          const dynamic = panTranslation - fixed;\n          translation.value = boundary + dynamic * 0.5;\n          return;\n        }\n      }\n\n      const translationValue = panOffset.value + panTranslation;\n      translation.value = translationValue;\n    },\n    [\n      isHorizontal,\n      max,\n      panOffset,\n      loop,\n      overscrollEnabled,\n      fixedDirection,\n      translation,\n      validStart,\n      touching,\n    ],\n  );\n\n  const onGestureEnd = useCallback(\n    (\n      e: GestureStateChangeEvent<PanGestureHandlerEventPayload>,\n      _success: boolean,\n    ) => {\n      \"worklet\";\n\n      const { velocityX, velocityY, translationX, translationY } = e;\n      scrollEndVelocity.value = isHorizontal.value\n        ? velocityX\n        : velocityY;\n\n      let panTranslation = isHorizontal.value\n        ? translationX\n        : translationY;\n\n      if (fixedDirection === \"negative\")\n        panTranslation = -Math.abs(panTranslation);\n      else if (fixedDirection === \"positive\")\n        panTranslation = +Math.abs(panTranslation);\n\n      scrollEndTranslation.value = panTranslation;\n\n      const totalTranslation\n                = scrollEndVelocity.value + scrollEndTranslation.value;\n\n      /**\n             * If the maximum scroll distance is set and the translation `exceeds the maximum scroll distance`,\n             * the carousel will keep the view at the current position.\n             */\n      if (\n        maxScrollDistancePerSwipeIsSet\n                && Math.abs(totalTranslation) > maxScrollDistancePerSwipe\n      ) {\n        const nextPage\n                    = Math.round(\n                      (panOffset.value\n                            + maxScrollDistancePerSwipe\n                                * Math.sign(totalTranslation))\n                            / size,\n                    ) * size;\n        translation.value = withSpring(\n          withProcessTranslation(nextPage),\n          onScrollEnd,\n        );\n      }\n      else if (\n      /**\n                 * If the minimum scroll distance is set and the translation `didn't exceeds the minimum scroll distance`,\n                 * the carousel will keep the view at the current position.\n                 */\n        minScrollDistancePerSwipeIsSet\n                && Math.abs(totalTranslation) < minScrollDistancePerSwipe\n      ) {\n        const nextPage\n                    = Math.round(\n                      (panOffset.value\n                            + minScrollDistancePerSwipe\n                                * Math.sign(totalTranslation))\n                            / size,\n                    ) * size;\n        translation.value = withSpring(\n          withProcessTranslation(nextPage),\n          onScrollEnd,\n        );\n      }\n      else {\n        endWithSpring(onScrollEnd);\n      }\n\n      if (!loop) touching.value = false;\n    },\n    [\n      size,\n      loop,\n      touching,\n      panOffset,\n      translation,\n      isHorizontal,\n      scrollEndVelocity,\n      scrollEndTranslation,\n      fixedDirection,\n      maxScrollDistancePerSwipeIsSet,\n      maxScrollDistancePerSwipe,\n      maxScrollDistancePerSwipeIsSet,\n      minScrollDistancePerSwipe,\n      endWithSpring,\n      withSpring,\n      onScrollEnd,\n    ],\n  );\n\n  const gesture = usePanGestureProxy({\n    onConfigurePanGesture,\n    onGestureStart,\n    onGestureUpdate,\n    onGestureEnd,\n    options: { enabled },\n  });\n\n  return (\n    <GestureDetector gesture={gesture}>\n      <Animated.View\n        ref={containerRef}\n        testID={testID}\n        style={style}\n        onTouchStart={onTouchBegin}\n        onTouchEnd={onTouchEnd}\n        accessibilityActions={accessibilityActions}\n        accessible={accessible}\n        accessibilityLabel={accessibilityLabel}\n        onAccessibilityAction={onAccessibilityAction}\n      >\n        {props.children}\n      </Animated.View>\n    </GestureDetector>\n  );\n};\n\nexport const ScrollViewGesture = IScrollViewGesture;\n"]}