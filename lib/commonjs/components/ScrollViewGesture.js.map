{"version":3,"sources":["ScrollViewGesture.tsx"],"names":["IScrollViewGesture","props","onConfigurePanGesture","vertical","pagingEnabled","snapEnabled","loop","scrollAnimationDuration","withAnimation","enabled","dataLength","overscrollEnabled","maxScrollDistancePerSwipe","minScrollDistancePerSwipe","fixedDirection","React","useContext","CTX","size","translation","testID","style","onScrollStart","onScrollEnd","onTouchBegin","onTouchEnd","maxPage","isHorizontal","max","panOffset","touching","validStart","scrollEndTranslation","scrollEndVelocity","containerRef","maxScrollDistancePerSwipeIsSet","minScrollDistancePerSwipeIsSet","getLimit","useCallback","width","containerWidth","withSpring","toValue","onFinished","defaultWithAnimation","type","config","duration","easing","Easing","easeOutQuart","isFinished","endWithSpring","origin","value","velocity","finalTranslation","deceleration","Math","abs","offset","computed","ceil","floor","page","finalPage","withProcessTranslation","min","nextPage","round","limit","sign","onFinish","activeDecay","resetBoundary","onGestureStart","_","onGestureUpdate","e","translationX","translationY","panTranslation","boundary","fixed","dynamic","translationValue","onGestureEnd","_success","velocityX","velocityY","totalTranslation","gesture","options","children","ScrollViewGesture"],"mappings":"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","sourcesContent":["import type { PropsWithChildren } from \"react\";\nimport React, { useCallback } from \"react\";\nimport type { StyleProp, ViewStyle } from \"react-native\";\nimport type { GestureStateChangeEvent, PanGestureHandlerEventPayload } from \"react-native-gesture-handler\";\nimport { GestureDetector } from \"react-native-gesture-handler\";\nimport Animated, {\n  cancelAnimation,\n  measure,\n  runOnJS,\n  useAnimatedReaction,\n  useAnimatedRef,\n  useDerivedValue,\n  useSharedValue,\n  withDecay,\n} from \"react-native-reanimated\";\n\nimport { Easing } from \"../constants\";\nimport { usePanGestureProxy } from \"../hooks/usePanGestureProxy\";\nimport { CTX } from \"../store\";\nimport type { WithTimingAnimation } from \"../types\";\nimport { dealWithAnimation } from \"../utils/deal-with-animation\";\n\ninterface Props {\n  size: number\n  infinite?: boolean\n  testID?: string\n  style?: StyleProp<ViewStyle>\n  onScrollStart?: () => void\n  onScrollEnd?: () => void\n  onTouchBegin?: () => void\n  onTouchEnd?: () => void\n  translation: Animated.SharedValue<number>\n}\n\nconst IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {\n  const {\n    props: {\n      onConfigurePanGesture,\n      vertical,\n      pagingEnabled,\n      snapEnabled,\n      loop,\n      scrollAnimationDuration,\n      withAnimation,\n      enabled,\n      dataLength,\n      overscrollEnabled,\n      maxScrollDistancePerSwipe,\n      minScrollDistancePerSwipe,\n      fixedDirection,\n    },\n  } = React.useContext(CTX);\n\n  const {\n    size,\n    translation,\n    testID,\n    style = {},\n    onScrollStart,\n    onScrollEnd,\n    onTouchBegin,\n    onTouchEnd,\n  } = props;\n\n  const maxPage = dataLength;\n  const isHorizontal = useDerivedValue(() => !vertical, [vertical]);\n  const max = useSharedValue(0);\n  const panOffset = useSharedValue(0);\n  const touching = useSharedValue(false);\n  const validStart = useSharedValue(false);\n  const scrollEndTranslation = useSharedValue(0);\n  const scrollEndVelocity = useSharedValue(0);\n  const containerRef = useAnimatedRef<Animated.View>();\n  const maxScrollDistancePerSwipeIsSet = typeof maxScrollDistancePerSwipe === \"number\";\n  const minScrollDistancePerSwipeIsSet = typeof minScrollDistancePerSwipe === \"number\";\n\n  // Get the limit of the scroll.\n  const getLimit = React.useCallback(() => {\n    \"worklet\";\n\n    if (!loop && !overscrollEnabled) {\n      const { width: containerWidth = 0 } = measure(containerRef);\n\n      // If the item's total width is less than the container's width, then there is no need to scroll.\n      if (dataLength * size < containerWidth)\n        return 0;\n\n      // Disable the \"overscroll\" effect\n      return dataLength * size - containerWidth;\n    }\n\n    return dataLength * size;\n  }, [loop, size, dataLength, overscrollEnabled]);\n\n  const withSpring = React.useCallback(\n    (toValue: number, onFinished?: () => void) => {\n      \"worklet\";\n      const defaultWithAnimation: WithTimingAnimation = {\n        type: \"timing\",\n        config: {\n          duration: scrollAnimationDuration + 100,\n          easing: Easing.easeOutQuart,\n        },\n      };\n\n      return dealWithAnimation(withAnimation ?? defaultWithAnimation)(\n        toValue,\n        (isFinished: boolean) => {\n          \"worklet\";\n          if (isFinished)\n            onFinished && runOnJS(onFinished)();\n        },\n      );\n    },\n    [scrollAnimationDuration, withAnimation],\n  );\n\n  const endWithSpring = React.useCallback(\n    (onFinished?: () => void) => {\n      \"worklet\";\n      const origin = translation.value;\n      const velocity = scrollEndVelocity.value;\n      // Default to scroll in the direction of the slide (with deceleration)\n      let finalTranslation: number = withDecay({ velocity, deceleration: 0.999 });\n\n      // If the distance of the swipe exceeds the max scroll distance, keep the view at the current position\n      if (maxScrollDistancePerSwipeIsSet && Math.abs(scrollEndTranslation.value) > maxScrollDistancePerSwipe) {\n        finalTranslation = origin;\n      }\n      else {\n        /**\n         * The page size is the same as the item size.\n         * If direction is vertical, the page size is the height of the item.\n         * If direction is horizontal, the page size is the width of the item.\n        *\n        * `page size` equals to `size` variable.\n        * */\n        if (pagingEnabled) {\n          // distance with direction\n          const offset = -(scrollEndTranslation.value >= 0 ? 1 : -1); // 1 or -1\n          const computed = offset < 0 ? Math.ceil : Math.floor;\n          const page = computed(-translation.value / size);\n\n          if (loop) {\n            const finalPage = page + offset;\n            finalTranslation = withSpring(withProcessTranslation(-finalPage * size), onFinished);\n          }\n          else {\n            const finalPage = Math.min(maxPage - 1, Math.max(0, page + offset));\n            finalTranslation = withSpring(withProcessTranslation(-finalPage * size), onFinished);\n          }\n        }\n\n        if (!pagingEnabled && snapEnabled) {\n          // scroll to the nearest item\n          const nextPage = Math.round((origin + velocity * 0.4) / size) * size;\n          finalTranslation = withSpring(withProcessTranslation(nextPage), onFinished);\n        }\n      }\n\n      translation.value = finalTranslation;\n\n      function withProcessTranslation(translation: number) {\n        if (!loop && !overscrollEnabled) {\n          const limit = getLimit();\n          const sign = Math.sign(translation);\n          return sign * Math.max(0, Math.min(limit, Math.abs(translation)));\n        }\n\n        return translation;\n      }\n    },\n    [\n      withSpring,\n      size,\n      maxPage,\n      loop,\n      snapEnabled,\n      translation,\n      pagingEnabled,\n      scrollEndVelocity.value,\n      maxScrollDistancePerSwipe,\n      scrollEndTranslation.value,\n      maxScrollDistancePerSwipeIsSet,\n    ],\n  );\n\n  const onFinish = React.useCallback(\n    (isFinished: boolean) => {\n      \"worklet\";\n      if (isFinished) {\n        touching.value = false;\n        onScrollEnd && runOnJS(onScrollEnd)();\n      }\n    },\n    [onScrollEnd, touching],\n  );\n\n  const activeDecay = React.useCallback(() => {\n    \"worklet\";\n    touching.value = true;\n    translation.value = withDecay(\n      { velocity: scrollEndVelocity.value },\n      isFinished => onFinish(isFinished as boolean),\n    );\n  }, [onFinish, scrollEndVelocity.value, touching, translation]);\n\n  const resetBoundary = React.useCallback(() => {\n    \"worklet\";\n    if (touching.value)\n      return;\n\n    if (translation.value > 0) {\n      if (scrollEndTranslation.value < 0) {\n        activeDecay();\n        return;\n      }\n      if (!loop) {\n        translation.value = withSpring(0);\n        return;\n      }\n    }\n\n    if (translation.value < -((maxPage - 1) * size)) {\n      if (scrollEndTranslation.value > 0) {\n        activeDecay();\n        return;\n      }\n      if (!loop)\n        translation.value = withSpring(-((maxPage - 1) * size));\n    }\n  }, [\n    touching.value,\n    translation,\n    maxPage,\n    size,\n    scrollEndTranslation.value,\n    loop,\n    activeDecay,\n    withSpring,\n  ]);\n\n  useAnimatedReaction(\n    () => translation.value,\n    () => {\n      if (!pagingEnabled)\n        resetBoundary();\n    },\n    [pagingEnabled, resetBoundary],\n  );\n\n  function withProcessTranslation(translation: number) {\n    \"worklet\";\n\n    if (!loop && !overscrollEnabled) {\n      const limit = getLimit();\n      const sign = Math.sign(translation);\n      return sign * Math.max(0, Math.min(limit, Math.abs(translation)));\n    }\n\n    return translation;\n  }\n\n  const onGestureStart = useCallback((_: PanGestureHandlerEventPayload) => {\n    \"worklet\";\n\n    touching.value = true;\n    validStart.value = true;\n    onScrollStart && runOnJS(onScrollStart)();\n\n    max.value = (maxPage - 1) * size;\n    if (!loop && !overscrollEnabled)\n      max.value = getLimit();\n\n    panOffset.value = translation.value;\n  }, [\n    max,\n    size,\n    maxPage,\n    loop,\n    touching,\n    panOffset,\n    validStart,\n    translation,\n    overscrollEnabled,\n    getLimit,\n    onScrollStart,\n  ]);\n\n  const onGestureUpdate = useCallback((e: PanGestureHandlerEventPayload) => {\n    \"worklet\";\n\n    if (validStart.value) {\n      validStart.value = false;\n      cancelAnimation(translation);\n    }\n    touching.value = true;\n    const { translationX, translationY } = e;\n\n    let panTranslation = isHorizontal.value\n      ? translationX\n      : translationY;\n\n    if (fixedDirection === \"negative\")\n      panTranslation = -Math.abs(panTranslation);\n\n    else if (fixedDirection === \"positive\")\n      panTranslation = +Math.abs(panTranslation);\n\n    if (!loop) {\n      if ((translation.value > 0 || translation.value < -max.value)) {\n        const boundary = translation.value > 0 ? 0 : -max.value;\n        const fixed = boundary - panOffset.value;\n        const dynamic = panTranslation - fixed;\n        translation.value = boundary + dynamic * 0.5;\n        return;\n      }\n    }\n\n    const translationValue = panOffset.value + panTranslation;\n    translation.value = translationValue;\n  }, [\n    isHorizontal,\n    max,\n    panOffset,\n    loop,\n    overscrollEnabled,\n    fixedDirection,\n    translation,\n    validStart,\n    touching,\n  ]);\n\n  const onGestureEnd = useCallback((e: GestureStateChangeEvent<PanGestureHandlerEventPayload>, _success: boolean) => {\n    \"worklet\";\n\n    const { velocityX, velocityY, translationX, translationY } = e;\n    scrollEndVelocity.value = isHorizontal.value\n      ? velocityX\n      : velocityY;\n\n    let panTranslation = isHorizontal.value\n      ? translationX\n      : translationY;\n\n    if (fixedDirection === \"negative\")\n      panTranslation = -Math.abs(panTranslation);\n\n    else if (fixedDirection === \"positive\")\n      panTranslation = +Math.abs(panTranslation);\n\n    scrollEndTranslation.value = panTranslation;\n\n    const totalTranslation = scrollEndVelocity.value + scrollEndTranslation.value;\n\n    /**\n     * If the maximum scroll distance is set and the translation `exceeds the maximum scroll distance`,\n     * the carousel will keep the view at the current position.\n    */\n    if (\n      maxScrollDistancePerSwipeIsSet && Math.abs(totalTranslation) > maxScrollDistancePerSwipe\n    ) {\n      const nextPage = Math.round((panOffset.value + maxScrollDistancePerSwipe * Math.sign(totalTranslation)) / size) * size;\n      translation.value = withSpring(withProcessTranslation(nextPage), onScrollEnd);\n    }\n    /**\n     * If the minimum scroll distance is set and the translation `didn't exceeds the minimum scroll distance`,\n     * the carousel will keep the view at the current position.\n    */\n    else if (\n      minScrollDistancePerSwipeIsSet && Math.abs(totalTranslation) < minScrollDistancePerSwipe\n    ) {\n      const nextPage = Math.round((panOffset.value + minScrollDistancePerSwipe * Math.sign(totalTranslation)) / size) * size;\n      translation.value = withSpring(withProcessTranslation(nextPage), onScrollEnd);\n    }\n    else {\n      endWithSpring(onScrollEnd);\n    }\n\n    if (!loop)\n      touching.value = false;\n  }, [\n    size,\n    loop,\n    touching,\n    panOffset,\n    translation,\n    isHorizontal,\n    scrollEndVelocity,\n    scrollEndTranslation,\n    fixedDirection,\n    maxScrollDistancePerSwipeIsSet,\n    maxScrollDistancePerSwipe,\n    maxScrollDistancePerSwipeIsSet,\n    minScrollDistancePerSwipe,\n    endWithSpring,\n    withSpring,\n    onScrollEnd,\n  ]);\n\n  const gesture = usePanGestureProxy({\n    onConfigurePanGesture,\n    onGestureStart,\n    onGestureUpdate,\n    onGestureEnd,\n    options: { enabled },\n  });\n\n  return (\n    <GestureDetector gesture={gesture}>\n      <Animated.View\n        ref={containerRef}\n        testID={testID}\n        style={style}\n        onTouchStart={onTouchBegin}\n        onTouchEnd={onTouchEnd}\n      >\n        {props.children}\n      </Animated.View>\n    </GestureDetector>\n  );\n};\n\nexport const ScrollViewGesture = IScrollViewGesture;\n"]}