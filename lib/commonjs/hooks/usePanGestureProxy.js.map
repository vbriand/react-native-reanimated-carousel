{"version":3,"sources":["usePanGestureProxy.ts"],"names":["usePanGestureProxy","customization","onConfigurePanGesture","onGestureStart","onGestureUpdate","onGestureEnd","options","gesture","Gesture","Pan","originalGestures","onStart","onUpdate","onEnd","userDefinedConflictGestures","undefined","fakeOnStart","cb","fakeOnUpdate","fakeOnEnd","e","success"],"mappings":";;;;;;;AAAA;;AAEA;;AAGA;;AAEO,MAAMA,kBAAkB,GAC7BC,aADgC,IAQ7B;AACH,QAAM;AACJC,IAAAA,qBADI;AAEJC,IAAAA,cAFI;AAGJC,IAAAA,eAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA,OAAO,GAAG;AALN,MAMFL,aANJ;AAQA,QAAMM,OAAO,GAAG,oBAAQ,MAAM;AAC5B,UAAMA,OAAO,GAAGC,mCAAQC,GAAR,EAAhB,CAD4B,CAG5B;;;AACA,UAAMC,gBAAgB,GAAG;AACvBC,MAAAA,OAAO,EAAEJ,OAAO,CAACI,OADM;AAEvBC,MAAAA,QAAQ,EAAEL,OAAO,CAACK,QAFK;AAGvBC,MAAAA,KAAK,EAAEN,OAAO,CAACM;AAHQ,KAAzB,CAJ4B,CAU5B;;AACA,UAAMC,2BAIL,GAAG;AACFH,MAAAA,OAAO,EAAEI,SADP;AAEFH,MAAAA,QAAQ,EAAEG,SAFR;AAGFF,MAAAA,KAAK,EAAEE;AAHL,KAJJ;;AAUA,UAAMC,WAAmC,GAAIC,EAAD,IAAQ;AAClD;AACAH,MAAAA,2BAA2B,CAACH,OAA5B,GAAsCM,EAAtC;AACA,aAAOV,OAAP;AACD,KAJD;;AAMA,UAAMW,YAAqC,GAAID,EAAD,IAAQ;AACpD;AACAH,MAAAA,2BAA2B,CAACF,QAA5B,GAAuCK,EAAvC;AACA,aAAOV,OAAP;AACD,KAJD;;AAMA,UAAMY,SAA+B,GAAIF,EAAD,IAAQ;AAC9C;AACAH,MAAAA,2BAA2B,CAACD,KAA5B,GAAoCI,EAApC;AACA,aAAOV,OAAP;AACD,KAJD,CAjC4B,CAuC5B;;;AACAA,IAAAA,OAAO,CAACI,OAAR,GAAkBK,WAAlB;AACAT,IAAAA,OAAO,CAACK,QAAR,GAAmBM,YAAnB;AACAX,IAAAA,OAAO,CAACM,KAAR,GAAgBM,SAAhB;AAEA,QAAIjB,qBAAJ,EACE;AACAA,MAAAA,qBAAqB,CAACK,OAAD,CAArB,CA9C0B,CAgD5B;;AACAA,IAAAA,OAAO,CAACI,OAAR,GAAkBD,gBAAgB,CAACC,OAAnC;AACAJ,IAAAA,OAAO,CAACK,QAAR,GAAmBF,gBAAgB,CAACE,QAApC;AACAL,IAAAA,OAAO,CAACM,KAAR,GAAgBH,gBAAgB,CAACG,KAAjC,CAnD4B,CAqD5B;;AACAN,IAAAA,OAAO,CACJI,OADH,CACYS,CAAD,IAAO;AACdjB,MAAAA,cAAc,CAACiB,CAAD,CAAd;AAEA,UAAIN,2BAA2B,CAACH,OAAhC,EACEG,2BAA2B,CAACH,OAA5B,CAAoCS,CAApC;AACH,KANH,EAOGR,QAPH,CAOaQ,CAAD,IAAO;AACfhB,MAAAA,eAAe,CAACgB,CAAD,CAAf;AAEA,UAAIN,2BAA2B,CAACF,QAAhC,EACEE,2BAA2B,CAACF,QAA5B,CAAqCQ,CAArC;AACH,KAZH,EAaGP,KAbH,CAaS,CAACO,CAAD,EAAIC,OAAJ,KAAgB;AACrBhB,MAAAA,YAAY,CAACe,CAAD,EAAIC,OAAJ,CAAZ;AAEA,UAAIP,2BAA2B,CAACD,KAAhC,EACEC,2BAA2B,CAACD,KAA5B,CAAkCO,CAAlC,EAAqCC,OAArC;AACH,KAlBH;AAoBA,WAAOd,OAAP;AACD,GA3Ee,EA2Eb,CACDJ,cADC,EAEDC,eAFC,EAGDC,YAHC,EAIDH,qBAJC,CA3Ea,CAAhB;AAkFA,sDAAuBK,OAAvB,EAAgCD,OAAhC;AAEA,SAAOC,OAAP;AACD,CAtGM","sourcesContent":["import { useMemo } from \"react\";\nimport type { GestureStateChangeEvent, GestureUpdateEvent, PanGesture, PanGestureHandlerEventPayload } from \"react-native-gesture-handler\";\nimport { Gesture } from \"react-native-gesture-handler\";\n\nimport type { GestureConfig } from \"./useUpdateGestureConfig\";\nimport { useUpdateGestureConfig } from \"./useUpdateGestureConfig\";\n\nexport const usePanGestureProxy = (\n  customization: {\n    onConfigurePanGesture?: (gesture: PanGesture) => void\n    onGestureStart: (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => void\n    onGestureUpdate: (event: GestureUpdateEvent<PanGestureHandlerEventPayload>) => void\n    onGestureEnd: (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>, success: boolean) => void\n    options?: GestureConfig\n  },\n) => {\n  const {\n    onConfigurePanGesture,\n    onGestureStart,\n    onGestureUpdate,\n    onGestureEnd,\n    options = {},\n  } = customization;\n\n  const gesture = useMemo(() => {\n    const gesture = Gesture.Pan();\n\n    // Save the original gesture callbacks\n    const originalGestures = {\n      onStart: gesture.onStart,\n      onUpdate: gesture.onUpdate,\n      onEnd: gesture.onEnd,\n    };\n\n    // Save the user defined gesture callbacks\n    const userDefinedConflictGestures: {\n      onStart?: Parameters<(typeof gesture)[\"onStart\"]>[0]\n      onUpdate?: Parameters<(typeof gesture)[\"onUpdate\"]>[0]\n      onEnd?: Parameters<(typeof gesture)[\"onEnd\"]>[0]\n    } = {\n      onStart: undefined,\n      onUpdate: undefined,\n      onEnd: undefined,\n    };\n\n    const fakeOnStart: typeof gesture.onStart = (cb) => {\n      // Using fakeOnStart to save the user defined callback\n      userDefinedConflictGestures.onStart = cb;\n      return gesture;\n    };\n\n    const fakeOnUpdate: typeof gesture.onUpdate = (cb) => {\n      // Using fakeOnUpdate to save the user defined callback\n      userDefinedConflictGestures.onUpdate = cb;\n      return gesture;\n    };\n\n    const fakeOnEnd: typeof gesture.onEnd = (cb) => {\n      // Using fakeOnEnd to save the user defined callback\n      userDefinedConflictGestures.onEnd = cb;\n      return gesture;\n    };\n\n    // Setup the fake callbacks\n    gesture.onStart = fakeOnStart;\n    gesture.onUpdate = fakeOnUpdate;\n    gesture.onEnd = fakeOnEnd;\n\n    if (onConfigurePanGesture)\n      // Get the gesture with the user defined configuration\n      onConfigurePanGesture(gesture);\n\n    // Restore the original callbacks\n    gesture.onStart = originalGestures.onStart;\n    gesture.onUpdate = originalGestures.onUpdate;\n    gesture.onEnd = originalGestures.onEnd;\n\n    // Setup the original callbacks with the user defined callbacks\n    gesture\n      .onStart((e) => {\n        onGestureStart(e);\n\n        if (userDefinedConflictGestures.onStart)\n          userDefinedConflictGestures.onStart(e);\n      })\n      .onUpdate((e) => {\n        onGestureUpdate(e);\n\n        if (userDefinedConflictGestures.onUpdate)\n          userDefinedConflictGestures.onUpdate(e);\n      })\n      .onEnd((e, success) => {\n        onGestureEnd(e, success);\n\n        if (userDefinedConflictGestures.onEnd)\n          userDefinedConflictGestures.onEnd(e, success);\n      });\n\n    return gesture;\n  }, [\n    onGestureStart,\n    onGestureUpdate,\n    onGestureEnd,\n    onConfigurePanGesture,\n  ]);\n\n  useUpdateGestureConfig(gesture, options);\n\n  return gesture;\n};\n"]}