{"version":3,"sources":["usePanGestureProxy.test.tsx"],"names":["beforeEach","cleanup","mockedEventHandlers","begin","jest","fn","start","active","end","fail","cancel","finish","mockedEventHandlersFromUser","describe","SingleHandler","handlers","handlersFromUser","treatStartAsUpdate","pan","onConfigurePanGesture","gesture","onBegin","onUpdate","onEnd","onFinalize","withTestId","onGestureStart","onGestureUpdate","onGestureEnd","options","enabled","RacingHandlers","tapHandlers","panHandlers","tap","Gesture","Tap","_","Race","it","state","State","BEGAN","ACTIVE","END","expect","toBeCalledWith","objectContaining","toBeCalled","not","panHandlersFromUser","translationX","toBeCalledTimes","toHaveBeenLastCalledWith","oldState","UNDETERMINED","x","y","toThrow","each","FAILED","CANCELLED","lastState","any","Object","RacingTapAndPan","Exclusive","nthCalledWith","lastCalledWith","anything","toHaveBeenNthCalledWith","toHaveBeenCalledTimes"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Text } from \"react-native\";\nimport type { PanGesture, PanGestureHandler, TapGesture } from \"react-native-gesture-handler\";\nimport { Gesture, GestureDetector, GestureHandlerRootView, State } from \"react-native-gesture-handler\";\n\nimport { cleanup, render } from \"@testing-library/react-native\";\nimport { fireGestureHandler, getByGestureTestId } from \"react-native-gesture-handler/jest-utils\";\n\nimport { usePanGestureProxy } from \"./usePanGestureProxy\";\n\nbeforeEach(cleanup);\n\nconst mockedEventHandlers = () => {\n  return {\n    begin: jest.fn(),\n    start: jest.fn(),\n    active: jest.fn(),\n    end: jest.fn(),\n    fail: jest.fn(),\n    cancel: jest.fn(),\n    finish: jest.fn(),\n  };\n};\n\nconst mockedEventHandlersFromUser = () => {\n  return {\n    begin: jest.fn(),\n    start: jest.fn(),\n    active: jest.fn(),\n    end: jest.fn(),\n    fail: jest.fn(),\n    cancel: jest.fn(),\n    finish: jest.fn(),\n  };\n};\n\ndescribe(\"Using RNGH v2 gesture API\", () => {\n  interface SingleHandlerProps {\n    handlers: ReturnType<typeof mockedEventHandlers>\n    handlersFromUser: ReturnType<typeof mockedEventHandlers>\n    treatStartAsUpdate?: boolean\n  }\n\n  function SingleHandler({ handlers, handlersFromUser, treatStartAsUpdate }: SingleHandlerProps) {\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (gesture: PanGesture) => {\n        // This is user's customizations\n        gesture\n          .onBegin(handlersFromUser.begin)\n          .onUpdate(handlersFromUser.active)\n          .onEnd(handlersFromUser.end)\n          .onFinalize(handlers.finish)\n          .withTestId(\"pan\");\n      },\n      onGestureStart: treatStartAsUpdate ? handlers.active : handlers.start,\n      onGestureUpdate: handlers.active,\n      onGestureEnd: handlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={pan}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  interface RacingHandlersProps {\n    tapHandlers: ReturnType<typeof mockedEventHandlers>\n    panHandlers: ReturnType<typeof mockedEventHandlers>\n  }\n\n  function RacingHandlers({ tapHandlers, panHandlers }: RacingHandlersProps) {\n    const tap = Gesture.Tap()\n      .onBegin(tapHandlers.begin)\n      .onEnd(tapHandlers.end)\n      .withTestId(\"tap\");\n\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (_: PanGesture) => {\n        _\n          .onBegin(panHandlers.begin)\n          .onFinalize(panHandlers.finish)\n          .withTestId(\"pan\");\n      },\n      onGestureStart: panHandlers.start,\n      onGestureUpdate: panHandlers.active,\n      onGestureEnd: panHandlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={Gesture.Race(tap, pan)}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  it(\"sends events to handlers\", () => {\n    const tapHandlers = mockedEventHandlers();\n    const panHandlers = mockedEventHandlers();\n    render(\n      <RacingHandlers tapHandlers={tapHandlers} panHandlers={panHandlers} />,\n    );\n\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN },\n      { state: State.ACTIVE },\n      { state: State.END },\n    ]);\n    expect(panHandlers.begin).toBeCalledWith(\n      expect.objectContaining({ state: State.BEGAN }),\n    );\n    expect(panHandlers.finish).toBeCalled();\n    expect(tapHandlers.begin).not.toBeCalled();\n  });\n\n  it(\"sends events with additional data to handlers\", () => {\n    const panHandlers = mockedEventHandlers();\n    const panHandlersFromUser = mockedEventHandlersFromUser();\n    render(<SingleHandler handlers={panHandlers} handlersFromUser={panHandlersFromUser} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN, translationX: 0 },\n      { state: State.ACTIVE, translationX: 10 },\n      { translationX: 20 },\n      { translationX: 20 },\n      { state: State.END, translationX: 30 },\n    ]);\n\n    expect(panHandlersFromUser.begin).toBeCalledTimes(1);\n    expect(panHandlersFromUser.active).toBeCalledTimes(2);\n    expect(panHandlersFromUser.end).toBeCalledTimes(1);\n\n    expect(panHandlers.active).toBeCalledTimes(3);\n    expect(panHandlers.active).toHaveBeenLastCalledWith(\n      expect.objectContaining({ translationX: 20 }),\n    );\n  });\n});\n\ndescribe(\"Event list validation\", () => {\n  interface SingleHandlerProps {\n    handlers: ReturnType<typeof mockedEventHandlers>\n    handlersFromUser: ReturnType<typeof mockedEventHandlers>\n    treatStartAsUpdate?: boolean\n  }\n\n  function SingleHandler({ handlers, handlersFromUser, treatStartAsUpdate }: SingleHandlerProps) {\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (_: PanGesture) => {\n        _\n          .onBegin(handlersFromUser.begin)\n          .onUpdate(handlersFromUser.active)\n          .onEnd(handlersFromUser.end)\n          .onFinalize(handlers.finish)\n          .withTestId(\"pan\");\n      },\n      onGestureStart: treatStartAsUpdate ? handlers.active : handlers.start,\n      onGestureUpdate: handlers.active,\n      onGestureEnd: handlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={pan}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  it(\"throws error when oldState doesn't correspond to previous event's state\", () => {\n    const panHandlers = mockedEventHandlers();\n    const panHandlersFromUser = mockedEventHandlersFromUser();\n    render(<SingleHandler handlers={panHandlers} handlersFromUser={panHandlersFromUser} />);\n\n    expect(() => {\n      fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n        { oldState: State.UNDETERMINED, state: State.BEGAN, x: 0, y: 10 },\n        { oldState: State.UNDETERMINED, state: State.ACTIVE, x: 1, y: 11 },\n      ]);\n    }).toThrow(\n      \"when state changes, oldState should be the same as previous event' state\",\n    );\n  });\n\n  it.each([[State.END], [State.FAILED], [State.CANCELLED]])(\n    \"correctly handles events ending with state %s\",\n    (lastState) => {\n      const panHandlers = mockedEventHandlers();\n      const panHandlersFromUser = mockedEventHandlersFromUser();\n      render(<SingleHandler handlers={panHandlers} handlersFromUser={panHandlersFromUser} />);\n      fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n        { state: State.BEGAN },\n        { state: State.ACTIVE },\n        { state: lastState },\n      ]);\n\n      expect(panHandlersFromUser.begin).toBeCalledTimes(1);\n      expect(panHandlersFromUser.active).toBeCalledTimes(0);\n      expect(panHandlersFromUser.end).toBeCalledTimes(1);\n\n      if (lastState === State.END)\n        expect(panHandlers.end).toBeCalled();\n\n      else\n        expect(panHandlers.finish).toBeCalledWith(expect.any(Object), false);\n    },\n  );\n});\n\ndescribe(\"Filling event list with defaults\", () => {\n  interface RacingTapAndPanProps {\n    handlers: ReturnType<typeof mockedEventHandlers>\n    treatStartAsUpdate?: boolean\n  }\n\n  function RacingTapAndPan({\n    handlers,\n    treatStartAsUpdate,\n  }: RacingTapAndPanProps) {\n    const tap = Gesture.Tap()\n      .onBegin(handlers.begin)\n      .onEnd(handlers.end)\n      .withTestId(\"tap\");\n\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (_: PanGesture) => {\n        _\n          .onBegin(handlers.begin)\n          .onFinalize(handlers.finish)\n          .withTestId(\"pan\");\n      },\n      onGestureStart: treatStartAsUpdate ? handlers.active : handlers.start,\n      onGestureUpdate: handlers.active,\n      onGestureEnd: handlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={Gesture.Exclusive(pan, tap)}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  it(\"fills oldState if not passed\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGestureHandler>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN },\n      { state: State.ACTIVE },\n      { state: State.ACTIVE },\n      { state: State.ACTIVE },\n      { state: State.END },\n    ]);\n\n    expect(handlers.begin).toBeCalledWith(\n      expect.objectContaining({ oldState: State.UNDETERMINED }),\n    );\n    expect(handlers.active).nthCalledWith(\n      1,\n      expect.objectContaining({ oldState: State.BEGAN }),\n    );\n    expect(handlers.active).lastCalledWith(\n      expect.not.objectContaining({ oldState: expect.anything() }),\n    );\n    expect(handlers.end).toBeCalledWith(\n      expect.objectContaining({ oldState: State.ACTIVE }),\n      true,\n    );\n  });\n\n  it(\"fills missing ACTIVE states\", () => {\n    const panHandlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={panHandlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN, x: 0, y: 10 },\n      { state: State.ACTIVE, x: 1, y: 11 },\n      { x: 2, y: 12 },\n      { x: 3, y: 13 },\n      { state: State.END, x: 4, y: 14 },\n    ]);\n\n    expect(panHandlers.active).toBeCalledTimes(3);\n    expect(panHandlers.active).toHaveBeenLastCalledWith(\n      expect.objectContaining({ x: 3, y: 13 }),\n    );\n  });\n\n  it(\"fills BEGIN and END events for discrete handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<TapGesture>(getByGestureTestId(\"tap\"), [{ x: 5 }]);\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledTimes(1);\n  });\n\n  it(\"with FAILED event, fills BEGIN event for discrete handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<TapGesture>(getByGestureTestId(\"tap\"), [\n      { state: State.FAILED },\n    ]);\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledWith(expect.anything(), false);\n  });\n\n  it(\"uses event data from first event in filled BEGIN, ACTIVE events\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [{ x: 120 }]);\n    expect(handlers.begin).toBeCalledWith(expect.objectContaining({ x: 120 }));\n    expect(handlers.active).toHaveBeenNthCalledWith(\n      1,\n      expect.objectContaining({ x: 120 }),\n    );\n  });\n\n  it(\"uses event data from last event in filled END events\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { x: 120, state: State.FAILED },\n    ]);\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.active).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledWith(\n      expect.objectContaining({ x: 120 }),\n      false,\n    );\n  });\n\n  it(\"uses event data filled events\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { x: 5, y: 15 },\n      { x: 6, y: 16 },\n      { x: 7, y: 17 },\n    ]);\n    expect(handlers.begin).toBeCalledWith(\n      expect.objectContaining({ x: 5, y: 15 }),\n    );\n    expect(handlers.active).toBeCalledTimes(3);\n    expect(handlers.end).toBeCalledWith(\n      expect.objectContaining({ x: 7, y: 17 }),\n      true,\n    );\n  });\n\n  it(\"fills BEGIN and END events when they're not present, for discrete handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<TapGesture>(getByGestureTestId(\"tap\"));\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.end).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"fills BEGIN, ACTIVE and END events when they're not present, for continuous handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"));\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.active).toBeCalledTimes(1);\n    expect(handlers.end).toHaveBeenCalledTimes(1);\n  });\n});\n"]}