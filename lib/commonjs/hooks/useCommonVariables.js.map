{"version":3,"names":["_reactNativeReanimated","require","_computeOffsetIfDataChanged","_computeOffsetIfSizeChanged","_handleroffsetDirection","useCommonVariables","props","vertical","height","width","dataLength","defaultIndex","defaultScrollOffsetValue","loop","size","defaultHandlerOffsetValue","Math","abs","_handlerOffset","useSharedValue","handlerOffset","prevDataLength","prevSize","useAnimatedReaction","previousLength","value","currentLength","isLengthChanged","shouldComputed","direction","handlerOffsetDirection","computeOffsetIfDataChanged","previousSize","isSizeChanged","computeOffsetIfSizeChanged","validLength"],"sources":["useCommonVariables.ts"],"sourcesContent":["import type Animated from \"react-native-reanimated\";\nimport { useSharedValue, useAnimatedReaction } from \"react-native-reanimated\";\n\nimport type { TInitializeCarouselProps } from \"./useInitProps\";\n\nimport { computeOffsetIfDataChanged } from \"../utils/compute-offset-if-data-changed\";\nimport { computeOffsetIfSizeChanged } from \"../utils/compute-offset-if-size-changed\";\nimport { handlerOffsetDirection } from \"../utils/handleroffset-direction\";\n\ninterface ICommonVariables {\n  size: number\n  validLength: number\n  handlerOffset: Animated.SharedValue<number>\n}\n\nexport function useCommonVariables(\n  props: TInitializeCarouselProps<any>,\n): ICommonVariables {\n  const {\n    vertical,\n    height,\n    width,\n    dataLength,\n    defaultIndex,\n    defaultScrollOffsetValue,\n    loop,\n  } = props;\n  const size = vertical ? height : width;\n  const defaultHandlerOffsetValue = -Math.abs(defaultIndex * size);\n  const _handlerOffset = useSharedValue<number>(defaultHandlerOffsetValue);\n  const handlerOffset = defaultScrollOffsetValue ?? _handlerOffset;\n  const prevDataLength = useSharedValue(dataLength);\n  const prevSize = useSharedValue(size);\n\n  /**\n   * When data changes, we need to compute new index for handlerOffset\n  */\n  useAnimatedReaction(() => {\n    const previousLength = prevDataLength.value;\n    const currentLength = dataLength;\n    const isLengthChanged = previousLength !== currentLength;\n    const shouldComputed = (isLengthChanged && loop);\n\n    if (shouldComputed)\n      prevDataLength.value = dataLength;\n\n    return {\n      shouldComputed,\n      previousLength,\n      currentLength,\n    };\n  }, ({ shouldComputed, previousLength, currentLength }) => {\n    if (shouldComputed) {\n      // direction -> 1 | -1\n      const direction = handlerOffsetDirection(handlerOffset);\n\n      handlerOffset.value = computeOffsetIfDataChanged({\n        direction,\n        previousLength,\n        currentLength,\n        size,\n        handlerOffset: handlerOffset.value,\n      });\n    }\n  }, [dataLength, loop]);\n\n  /**\n   * When size changes, we need to compute new index for handlerOffset\n  */\n  useAnimatedReaction(() => {\n    const previousSize = prevSize.value;\n    const isSizeChanged = previousSize !== size;\n    const shouldComputed = isSizeChanged;\n\n    if (shouldComputed)\n      prevSize.value = size;\n\n    return {\n      shouldComputed,\n      previousSize,\n      size,\n    };\n  }, ({ shouldComputed, previousSize, size }) => {\n    if (shouldComputed) {\n      handlerOffset.value = computeOffsetIfSizeChanged({\n        handlerOffset: handlerOffset.value,\n        prevSize: previousSize,\n        size,\n      });\n    }\n  }, [size]);\n\n  return {\n    size,\n    validLength: dataLength - 1,\n    handlerOffset,\n  };\n}\n"],"mappings":";;;;;;AACA,IAAAA,sBAAA,GAAAC,OAAA;AAIA,IAAAC,2BAAA,GAAAD,OAAA;AACA,IAAAE,2BAAA,GAAAF,OAAA;AACA,IAAAG,uBAAA,GAAAH,OAAA;AAQO,SAASI,kBAAkBA,CAChCC,KAAoC,EAClB;EAClB,MAAM;IACJC,QAAQ;IACRC,MAAM;IACNC,KAAK;IACLC,UAAU;IACVC,YAAY;IACZC,wBAAwB;IACxBC;EACF,CAAC,GAAGP,KAAK;EACT,MAAMQ,IAAI,GAAGP,QAAQ,GAAGC,MAAM,GAAGC,KAAK;EACtC,MAAMM,yBAAyB,GAAG,CAACC,IAAI,CAACC,GAAG,CAACN,YAAY,GAAGG,IAAI,CAAC;EAChE,MAAMI,cAAc,GAAG,IAAAC,qCAAc,EAASJ,yBAAyB,CAAC;EACxE,MAAMK,aAAa,GAAGR,wBAAwB,IAAIM,cAAc;EAChE,MAAMG,cAAc,GAAG,IAAAF,qCAAc,EAACT,UAAU,CAAC;EACjD,MAAMY,QAAQ,GAAG,IAAAH,qCAAc,EAACL,IAAI,CAAC;;EAErC;AACF;AACA;EACE,IAAAS,0CAAmB,EAAC,MAAM;IACxB,MAAMC,cAAc,GAAGH,cAAc,CAACI,KAAK;IAC3C,MAAMC,aAAa,GAAGhB,UAAU;IAChC,MAAMiB,eAAe,GAAGH,cAAc,KAAKE,aAAa;IACxD,MAAME,cAAc,GAAID,eAAe,IAAId,IAAK;IAEhD,IAAIe,cAAc,EAChBP,cAAc,CAACI,KAAK,GAAGf,UAAU;IAEnC,OAAO;MACLkB,cAAc;MACdJ,cAAc;MACdE;IACF,CAAC;EACH,CAAC,EAAE,CAAC;IAAEE,cAAc;IAAEJ,cAAc;IAAEE;EAAc,CAAC,KAAK;IACxD,IAAIE,cAAc,EAAE;MAClB;MACA,MAAMC,SAAS,GAAG,IAAAC,8CAAsB,EAACV,aAAa,CAAC;MAEvDA,aAAa,CAACK,KAAK,GAAG,IAAAM,sDAA0B,EAAC;QAC/CF,SAAS;QACTL,cAAc;QACdE,aAAa;QACbZ,IAAI;QACJM,aAAa,EAAEA,aAAa,CAACK;MAC/B,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACf,UAAU,EAAEG,IAAI,CAAC,CAAC;;EAEtB;AACF;AACA;EACE,IAAAU,0CAAmB,EAAC,MAAM;IACxB,MAAMS,YAAY,GAAGV,QAAQ,CAACG,KAAK;IACnC,MAAMQ,aAAa,GAAGD,YAAY,KAAKlB,IAAI;IAC3C,MAAMc,cAAc,GAAGK,aAAa;IAEpC,IAAIL,cAAc,EAChBN,QAAQ,CAACG,KAAK,GAAGX,IAAI;IAEvB,OAAO;MACLc,cAAc;MACdI,YAAY;MACZlB;IACF,CAAC;EACH,CAAC,EAAE,CAAC;IAAEc,cAAc;IAAEI,YAAY;IAAElB;EAAK,CAAC,KAAK;IAC7C,IAAIc,cAAc,EAAE;MAClBR,aAAa,CAACK,KAAK,GAAG,IAAAS,sDAA0B,EAAC;QAC/Cd,aAAa,EAAEA,aAAa,CAACK,KAAK;QAClCH,QAAQ,EAAEU,YAAY;QACtBlB;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,OAAO;IACLA,IAAI;IACJqB,WAAW,EAAEzB,UAAU,GAAG,CAAC;IAC3BU;EACF,CAAC;AACH","ignoreList":[]}