{"version":3,"names":["DATA_LENGTH","SINGLE_ITEM","DOUBLE_ITEM","isAutoFillData","params","loop","autoFillData","convertToSharedIndex","rawDataLength","index","computedOffsetXValueWithAutoFillData","value","size","computedRealIndexWithAutoFillData","dataLength","computedFillDataWithAutoFillData","data"],"sources":["computed-with-auto-fill-data.ts"],"sourcesContent":["import { DATA_LENGTH } from \"../constants\";\n\nconst { SINGLE_ITEM, DOUBLE_ITEM } = DATA_LENGTH;\n\nfunction isAutoFillData(params: { autoFillData: boolean; loop: boolean }) {\n  \"worklet\";\n  return !!params.loop && !!params.autoFillData;\n}\n\ntype BaseParams<T extends object = {}> = {\n  autoFillData: boolean\n  loop: boolean\n} & T;\n\nexport function convertToSharedIndex(\n  params: BaseParams<{ index: number; rawDataLength: number }>,\n) {\n  \"worklet\";\n  const { loop, rawDataLength, index, autoFillData } = params;\n\n  if (isAutoFillData({ loop, autoFillData })) {\n    switch (rawDataLength) {\n      case SINGLE_ITEM:\n        return 0;\n      case DOUBLE_ITEM:\n        return index % 2;\n    }\n  }\n\n  return index;\n}\n\nexport function computedOffsetXValueWithAutoFillData(\n  params: BaseParams<{\n    rawDataLength: number\n    value: number\n    size: number\n  }>,\n) {\n  \"worklet\";\n\n  const { rawDataLength, value, size, loop, autoFillData } = params;\n\n  if (isAutoFillData({ loop, autoFillData })) {\n    switch (rawDataLength) {\n      case SINGLE_ITEM:\n        return value % size;\n      case DOUBLE_ITEM:\n        return value % (size * 2);\n    }\n  }\n\n  return value;\n}\n\nexport function computedRealIndexWithAutoFillData(\n  params: BaseParams<{\n    index: number\n    dataLength: number\n  }>,\n) {\n  const { index, dataLength, loop, autoFillData } = params;\n\n  if (isAutoFillData({ loop, autoFillData })) {\n    switch (dataLength) {\n      case SINGLE_ITEM:\n        return index % 1;\n      case DOUBLE_ITEM:\n        return index % 2;\n    }\n  }\n\n  return index;\n}\n\nexport function computedFillDataWithAutoFillData<T>(\n  params: BaseParams<{\n    data: T[]\n    dataLength: number\n  }>,\n): T[] {\n  const { data, loop, autoFillData, dataLength } = params;\n\n  if (isAutoFillData({ loop, autoFillData })) {\n    switch (dataLength) {\n      case SINGLE_ITEM:\n        return [data[0], data[0], data[0]];\n      case DOUBLE_ITEM:\n        return [data[0], data[1], data[0], data[1]];\n    }\n  }\n\n  return data;\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,cAAc;AAE1C,MAAM;EAAEC,WAAW;EAAEC;AAAY,CAAC,GAAGF,WAAW;AAEhD,SAASG,cAAcA,CAACC,MAAgD,EAAE;EACxE,SAAS;;EACT,OAAO,CAAC,CAACA,MAAM,CAACC,IAAI,IAAI,CAAC,CAACD,MAAM,CAACE,YAAY;AAC/C;AAOA,OAAO,SAASC,oBAAoBA,CAClCH,MAA4D,EAC5D;EACA,SAAS;;EACT,MAAM;IAAEC,IAAI;IAAEG,aAAa;IAAEC,KAAK;IAAEH;EAAa,CAAC,GAAGF,MAAM;EAE3D,IAAID,cAAc,CAAC;IAAEE,IAAI;IAAEC;EAAa,CAAC,CAAC,EAAE;IAC1C,QAAQE,aAAa;MACnB,KAAKP,WAAW;QACd,OAAO,CAAC;MACV,KAAKC,WAAW;QACd,OAAOO,KAAK,GAAG,CAAC;IACpB;EACF;EAEA,OAAOA,KAAK;AACd;AAEA,OAAO,SAASC,oCAAoCA,CAClDN,MAIE,EACF;EACA,SAAS;;EAET,MAAM;IAAEI,aAAa;IAAEG,KAAK;IAAEC,IAAI;IAAEP,IAAI;IAAEC;EAAa,CAAC,GAAGF,MAAM;EAEjE,IAAID,cAAc,CAAC;IAAEE,IAAI;IAAEC;EAAa,CAAC,CAAC,EAAE;IAC1C,QAAQE,aAAa;MACnB,KAAKP,WAAW;QACd,OAAOU,KAAK,GAAGC,IAAI;MACrB,KAAKV,WAAW;QACd,OAAOS,KAAK,IAAIC,IAAI,GAAG,CAAC,CAAC;IAC7B;EACF;EAEA,OAAOD,KAAK;AACd;AAEA,OAAO,SAASE,iCAAiCA,CAC/CT,MAGE,EACF;EACA,MAAM;IAAEK,KAAK;IAAEK,UAAU;IAAET,IAAI;IAAEC;EAAa,CAAC,GAAGF,MAAM;EAExD,IAAID,cAAc,CAAC;IAAEE,IAAI;IAAEC;EAAa,CAAC,CAAC,EAAE;IAC1C,QAAQQ,UAAU;MAChB,KAAKb,WAAW;QACd,OAAOQ,KAAK,GAAG,CAAC;MAClB,KAAKP,WAAW;QACd,OAAOO,KAAK,GAAG,CAAC;IACpB;EACF;EAEA,OAAOA,KAAK;AACd;AAEA,OAAO,SAASM,gCAAgCA,CAC9CX,MAGE,EACG;EACL,MAAM;IAAEY,IAAI;IAAEX,IAAI;IAAEC,YAAY;IAAEQ;EAAW,CAAC,GAAGV,MAAM;EAEvD,IAAID,cAAc,CAAC;IAAEE,IAAI;IAAEC;EAAa,CAAC,CAAC,EAAE;IAC1C,QAAQQ,UAAU;MAChB,KAAKb,WAAW;QACd,OAAO,CAACe,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;MACpC,KAAKd,WAAW;QACd,OAAO,CAACc,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/C;EACF;EAEA,OAAOA,IAAI;AACb","ignoreList":[]}