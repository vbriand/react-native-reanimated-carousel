{"version":3,"names":["computeOffsetIfSizeChanged","describe","it","prevIndex","prevSize","size","handlerOffset","result","finallyIndex","expect","toEqual"],"sources":["compute-offset-if-size-changed.test.ts"],"sourcesContent":["import { computeOffsetIfSizeChanged } from \"./compute-offset-if-size-changed\";\n\ndescribe(\"computeOffsetIfSizeChanged\", () => {\n  it(\"[CASE 1] should return the correct values when size does not change\", () => {\n    const prevIndex = 1;\n    const prevSize = 500;\n    const size = 500;\n    const handlerOffset = prevIndex * size;\n    const result = computeOffsetIfSizeChanged({\n      prevSize,\n      size,\n      handlerOffset,\n    });\n\n    const finallyIndex = result / size;\n    expect(finallyIndex).toEqual(prevIndex);\n  });\n\n  it(\"[CASE 2] should return the correct values when size changes from 500 to 400\", () => {\n    const prevIndex = 1;\n    const prevSize = 500;\n    const size = 400;\n    const handlerOffset = prevIndex * prevSize;\n    const result = computeOffsetIfSizeChanged({\n      prevSize,\n      size,\n      handlerOffset,\n    });\n\n    const finallyIndex = result / size;\n    expect(finallyIndex).toEqual(prevIndex);\n  });\n\n  it(\"[CASE 3] should return the correct values when size changes from 500 to 499\", () => {\n    const prevIndex = 1;\n    const prevSize = 500;\n    const size = 499;\n    const handlerOffset = prevIndex * prevSize;\n    const result = computeOffsetIfSizeChanged({\n      prevSize,\n      size,\n      handlerOffset,\n    });\n\n    const finallyIndex = result / size;\n    expect(finallyIndex).toEqual(prevIndex);\n  });\n\n  it(\"[CASE 4] should return the correct values when size changes from 500 to 501\", () => {\n    const prevIndex = 1;\n    const prevSize = 500;\n    const size = 501;\n    const handlerOffset = prevIndex * prevSize;\n    const result = computeOffsetIfSizeChanged({\n      prevSize,\n      size,\n      handlerOffset,\n    });\n\n    const finallyIndex = result / size;\n    expect(finallyIndex).toEqual(prevIndex);\n  });\n\n  it(\"[CASE 5] should return the correct values when size changes from 224 to 524\", () => {\n    const prevIndex = 1;\n    const prevSize = 224;\n    const size = 524;\n    const handlerOffset = prevIndex * prevSize;\n    const result = computeOffsetIfSizeChanged({\n      prevSize,\n      size,\n      handlerOffset,\n    });\n\n    const finallyIndex = result / size;\n    expect(finallyIndex).toEqual(prevIndex);\n  });\n});\n"],"mappings":"AAAA,SAASA,0BAA0B,QAAQ,kCAAkC;AAE7EC,QAAQ,CAAC,4BAA4B,EAAE,MAAM;EAC3CC,EAAE,CAAC,qEAAqE,EAAE,MAAM;IAC9E,MAAMC,SAAS,GAAG,CAAC;IACnB,MAAMC,QAAQ,GAAG,GAAG;IACpB,MAAMC,IAAI,GAAG,GAAG;IAChB,MAAMC,aAAa,GAAGH,SAAS,GAAGE,IAAI;IACtC,MAAME,MAAM,GAAGP,0BAA0B,CAAC;MACxCI,QAAQ;MACRC,IAAI;MACJC;IACF,CAAC,CAAC;IAEF,MAAME,YAAY,GAAGD,MAAM,GAAGF,IAAI;IAClCI,MAAM,CAACD,YAAY,CAAC,CAACE,OAAO,CAACP,SAAS,CAAC;EACzC,CAAC,CAAC;EAEFD,EAAE,CAAC,6EAA6E,EAAE,MAAM;IACtF,MAAMC,SAAS,GAAG,CAAC;IACnB,MAAMC,QAAQ,GAAG,GAAG;IACpB,MAAMC,IAAI,GAAG,GAAG;IAChB,MAAMC,aAAa,GAAGH,SAAS,GAAGC,QAAQ;IAC1C,MAAMG,MAAM,GAAGP,0BAA0B,CAAC;MACxCI,QAAQ;MACRC,IAAI;MACJC;IACF,CAAC,CAAC;IAEF,MAAME,YAAY,GAAGD,MAAM,GAAGF,IAAI;IAClCI,MAAM,CAACD,YAAY,CAAC,CAACE,OAAO,CAACP,SAAS,CAAC;EACzC,CAAC,CAAC;EAEFD,EAAE,CAAC,6EAA6E,EAAE,MAAM;IACtF,MAAMC,SAAS,GAAG,CAAC;IACnB,MAAMC,QAAQ,GAAG,GAAG;IACpB,MAAMC,IAAI,GAAG,GAAG;IAChB,MAAMC,aAAa,GAAGH,SAAS,GAAGC,QAAQ;IAC1C,MAAMG,MAAM,GAAGP,0BAA0B,CAAC;MACxCI,QAAQ;MACRC,IAAI;MACJC;IACF,CAAC,CAAC;IAEF,MAAME,YAAY,GAAGD,MAAM,GAAGF,IAAI;IAClCI,MAAM,CAACD,YAAY,CAAC,CAACE,OAAO,CAACP,SAAS,CAAC;EACzC,CAAC,CAAC;EAEFD,EAAE,CAAC,6EAA6E,EAAE,MAAM;IACtF,MAAMC,SAAS,GAAG,CAAC;IACnB,MAAMC,QAAQ,GAAG,GAAG;IACpB,MAAMC,IAAI,GAAG,GAAG;IAChB,MAAMC,aAAa,GAAGH,SAAS,GAAGC,QAAQ;IAC1C,MAAMG,MAAM,GAAGP,0BAA0B,CAAC;MACxCI,QAAQ;MACRC,IAAI;MACJC;IACF,CAAC,CAAC;IAEF,MAAME,YAAY,GAAGD,MAAM,GAAGF,IAAI;IAClCI,MAAM,CAACD,YAAY,CAAC,CAACE,OAAO,CAACP,SAAS,CAAC;EACzC,CAAC,CAAC;EAEFD,EAAE,CAAC,6EAA6E,EAAE,MAAM;IACtF,MAAMC,SAAS,GAAG,CAAC;IACnB,MAAMC,QAAQ,GAAG,GAAG;IACpB,MAAMC,IAAI,GAAG,GAAG;IAChB,MAAMC,aAAa,GAAGH,SAAS,GAAGC,QAAQ;IAC1C,MAAMG,MAAM,GAAGP,0BAA0B,CAAC;MACxCI,QAAQ;MACRC,IAAI;MACJC;IACF,CAAC,CAAC;IAEF,MAAME,YAAY,GAAGD,MAAM,GAAGF,IAAI;IAClCI,MAAM,CAACD,YAAY,CAAC,CAACE,OAAO,CAACP,SAAS,CAAC;EACzC,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}