{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type { AccessibilityProps, StyleProp, ViewStyle } from \"react-native\";\nimport type { PanGesture } from \"react-native-gesture-handler\";\nimport type {\n  AnimatedStyleProp,\n  SharedValue,\n  WithSpringConfig,\n  WithTimingConfig,\n} from \"react-native-reanimated\";\nimport type Animated from \"react-native-reanimated\";\n\nimport type { TParallaxModeProps } from \"./layouts/parallax\";\nimport type { TStackModeProps } from \"./layouts/stack\";\n\nexport type IComputedDirectionTypes<T, VP = {}, HP = {}> =\n   | (T &\n   VP & {\n     /**\n                  * Layout items vertically instead of horizontally\n                  */\n     vertical: true\n     /**\n                  * Layout items vertically instead of horizontally\n                  */\n     /**\n                  * Specified carousel container width.\n                  */\n     width?: number\n     height: number\n   })\n   | (T &\n   HP & {\n     /**\n                  * Layout items vertically instead of horizontally\n                  */\n     vertical?: false\n     /**\n                  * Layout items vertically instead of horizontally\n                  */\n     /**\n                  * Specified carousel container width.\n                  */\n     width: number\n     height?: number\n   });\n\nexport interface CustomConfig {\n  type?: \"negative\" | \"positive\"\n  viewCount?: number\n}\n\nexport interface WithSpringAnimation {\n  type: \"spring\"\n  config: WithSpringConfig\n}\n\nexport interface WithTimingAnimation {\n  type: \"timing\"\n  config: WithTimingConfig\n}\n\nexport type WithAnimation = WithSpringAnimation | WithTimingAnimation;\n\nexport type TCarouselProps<T = any> = {\n  ref?: React.Ref<ICarouselInstance>\n  /**\n      * The default animated value of the carousel.\n      */\n  defaultScrollOffsetValue?: SharedValue<number>\n  /**\n      * Carousel loop playback.\n      * @default true\n      */\n  loop?: boolean\n  /**\n      * Carousel items data set.\n      */\n  data: T[]\n  /**\n      * Auto fill data array to allow loop playback when the loop props is true.\n      * @default true\n      * @example\n      * [1] => [1, 1, 1]\n      * [1, 2] => [1, 2, 1, 2]\n      */\n  autoFillData?: boolean\n  /**\n      * Default index\n      * @default 0\n      */\n  defaultIndex?: number\n  /**\n      * Auto play\n      */\n  autoPlay?: boolean\n  /**\n      * Auto play\n      * @description reverse playback\n      */\n  autoPlayReverse?: boolean\n  /**\n      * Auto play\n      * @description playback interval\n      */\n  autoPlayInterval?: number\n  /**\n      * Time a scroll animation takes to finish\n      * @default 500 (ms)\n      */\n  scrollAnimationDuration?: number\n  /**\n      * Carousel container style\n      */\n  style?: StyleProp<ViewStyle>\n  /**\n      * PanGesture config\n      */\n  onConfigurePanGesture?: (panGesture: PanGesture) => void\n  /**\n      * Determines the maximum number of items will respond to pan gesture events,\n      * windowSize={11} will active visible item plus up to 5 items above and 5 below the viewpor,\n      * Reducing this number will reduce the calculation of the animation value and may improve performance.\n      * @default 0 all items will respond to pan gesture events.\n      */\n  windowSize?: number\n  /**\n      * When true, the scroll view stops on multiples of the scroll view's size when scrolling.\n      * @default true\n      */\n  pagingEnabled?: boolean\n  /**\n      * If enabled, releasing the touch will scroll to the nearest item.\n      * valid when pagingEnabled=false\n      * @default true\n      */\n  snapEnabled?: boolean\n  /**\n      * If enabled, items will scroll to the first placement when scrolling past the edge rather than closing to the last. (previous conditions: loop=false)\n      * @default true\n      */\n  overscrollEnabled?: boolean\n  /**\n      * If false, Carousel will not respond to any gestures.\n      * @default true\n      */\n  enabled?: boolean\n  /**\n      * Specifies the scrolling animation effect.\n      */\n  withAnimation?: WithAnimation\n  /**\n      * Used to locate this view in end-to-end tests.\n      */\n  testID?: string\n  /**\n     * Maximum offset value for once scroll.\n     * Carousel cannot scroll over than this value.\n     * */\n  maxScrollDistancePerSwipe?: number\n  /**\n    * Minimum offset value for once scroll.\n    * If the translation value is less than this value, the carousel will not scroll.\n    * */\n  minScrollDistancePerSwipe?: number\n  /**\n     * @experimental This API will be changed in the future.\n     * If positive, the carousel will scroll to the positive direction and vice versa.\n     * */\n  fixedDirection?: \"positive\" | \"negative\"\n  /**\n      * Custom carousel config.\n      */\n  customConfig?: () => CustomConfig\n  /**\n      * Custom animations.\n      * Must use `worklet`, Details: https://docs.swmansion.com/react-native-reanimated/docs/2.2.0/worklets/\n      */\n  customAnimation?: (value: number) => AnimatedStyleProp<ViewStyle>\n  /**\n      * Render carousel item.\n      */\n  renderItem: CarouselRenderItem<T>\n  /**\n      * Callback fired when navigating to an item.\n      */\n  onSnapToItem?: (index: number) => void\n  /**\n      * On scroll start\n      */\n  onScrollStart?: () => void\n  /**\n      * On scroll end\n      */\n  onScrollEnd?: (index: number) => void\n  /**\n      * On progress change\n      * @param offsetProgress Total of offset distance (0 390 780 ...)\n      * @param absoluteProgress Convert to index (0 1 2 ...)\n      *\n      * If you want to update a shared value automatically, you can use the shared value as a parameter directly.\n      */\n  onProgressChange?: ((\n    offsetProgress: number,\n    absoluteProgress: number\n  ) => void) | SharedValue<number>\n\n  // ============================== deprecated props ==============================\n  /**\n      * If enabled, releasing the touch will scroll to the nearest item.\n      * valid when pagingEnabled=false\n      * @deprecated please use snapEnabled instead\n      */\n  enableSnap?: boolean\n} & (TParallaxModeProps | TStackModeProps) & AccessibilityProps;\n\nexport interface ICarouselInstance {\n  /**\n     * Scroll to previous item, it takes one optional argument (count),\n     * which allows you to specify how many items to cross\n     */\n  prev: (opts?: Omit<TCarouselActionOptions, \"index\">) => void\n  /**\n     * Scroll to next item, it takes one optional argument (count),\n     * which allows you to specify how many items to cross\n     */\n  next: (opts?: Omit<TCarouselActionOptions, \"index\">) => void\n  /**\n     * Get current item index\n     */\n  getCurrentIndex: () => number\n  /**\n     * Use value to scroll to a position where relative to the current position,\n     * scrollTo({count: -2}) is equivalent to prev(2), scrollTo({count: 2}) is equivalent to next(2)\n     */\n  scrollTo: (opts?: TCarouselActionOptions) => void\n}\n\nexport interface CarouselRenderItemInfo<ItemT> {\n  item: ItemT\n  index: number\n  animationValue: Animated.SharedValue<number>\n}\n\nexport type CarouselRenderItem<ItemT> = (\n  info: CarouselRenderItemInfo<ItemT>\n) => React.ReactElement;\n\nexport interface TCarouselActionOptions {\n  index?: number\n  count?: number\n  animated?: boolean\n  onFinished?: () => void\n}\n"],"mappings":"","ignoreList":[]}