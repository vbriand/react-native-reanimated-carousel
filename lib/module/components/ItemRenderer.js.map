{"version":3,"sources":["ItemRenderer.tsx"],"names":["React","useAnimatedReaction","runOnJS","BaseLayout","useVisibleRanges","computedRealIndexWithAutoFillData","ItemRenderer","props","data","size","windowSize","handlerOffset","offsetX","dataLength","rawDataLength","loop","autoFillData","layoutConfig","renderItem","customAnimation","visibleRanges","total","viewSize","translation","displayedItems","setDisplayedItems","useState","value","ranges","map","item","index","realIndex","negativeRange","positiveRange","shouldRender","animationValue"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,SAASC,mBAAT,EAAsDC,OAAtD,QAAqE,yBAArE;AAGA,SAASC,UAAT,QAA2B,cAA3B;AAGA,SAASC,gBAAT,QAAiC,2BAAjC;AAEA,SAASC,iCAAT,QAAkD,uCAAlD;AAiBA,OAAO,MAAMC,YAAuB,GAAIC,KAAD,IAAW;AAChD,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,aAJI;AAKJC,IAAAA,OALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA,aAPI;AAQJC,IAAAA,IARI;AASJC,IAAAA,YATI;AAUJC,IAAAA,YAVI;AAWJC,IAAAA,UAXI;AAYJC,IAAAA;AAZI,MAaFZ,KAbJ;AAeA,QAAMa,aAAa,GAAGhB,gBAAgB,CAAC;AACrCiB,IAAAA,KAAK,EAAER,UAD8B;AAErCS,IAAAA,QAAQ,EAAEb,IAF2B;AAGrCc,IAAAA,WAAW,EAAEZ,aAHwB;AAIrCD,IAAAA,UAJqC;AAKrCK,IAAAA;AALqC,GAAD,CAAtC;AAQA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCzB,KAAK,CAAC0B,QAAN,CAA8B,IAA9B,CAA5C;AAEAzB,EAAAA,mBAAmB,CACjB,MAAMmB,aAAa,CAACO,KADH,EAEjBC,MAAM,IAAI1B,OAAO,CAACuB,iBAAD,CAAP,CAA2BG,MAA3B,CAFO,EAGjB,CAACR,aAAD,CAHiB,CAAnB;AAMA,MAAI,CAACI,cAAL,EACE,OAAO,IAAP;AAEF,sBACE,0CAEIhB,IAAI,CAACqB,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACxB,UAAMC,SAAS,GAAG3B,iCAAiC,CAAC;AAClD0B,MAAAA,KADkD;AAElDlB,MAAAA,UAAU,EAAEC,aAFsC;AAGlDC,MAAAA,IAHkD;AAIlDC,MAAAA;AAJkD,KAAD,CAAnD;AAOA,UAAM;AAAEiB,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,QAAmCV,cAAzC;AAEA,UAAMW,YAAY,GAAIJ,KAAK,IAAIE,aAAa,CAAC,CAAD,CAAtB,IAA6BF,KAAK,IAAIE,aAAa,CAAC,CAAD,CAApD,IACjBF,KAAK,IAAIG,aAAa,CAAC,CAAD,CAAtB,IAA6BH,KAAK,IAAIG,aAAa,CAAC,CAAD,CADvD;AAGA,QAAI,CAACC,YAAL,EACE,OAAO,IAAP;AAEF,wBACE,oBAAC,UAAD;AACE,MAAA,GAAG,EAAEJ,KADP;AAEE,MAAA,KAAK,EAAEA,KAFT;AAGE,MAAA,aAAa,EAAEnB,OAHjB;AAIE,MAAA,aAAa,EAAEQ,aAJjB;AAKE,MAAA,cAAc,EAAED,eAAe,IAAIF;AALrC,OAOG;AAAA,UAAC;AAAEmB,QAAAA;AAAF,OAAD;AAAA,aACClB,UAAU,CAAC;AACTY,QAAAA,IADS;AAETC,QAAAA,KAAK,EAAEC,SAFE;AAGTI,QAAAA;AAHS,OAAD,CADX;AAAA,KAPH,CADF;AAiBD,GAjCD,CAFJ,CADF;AAwCD,CA3EM","sourcesContent":["import React from \"react\";\nimport type { FC } from \"react\";\nimport type { ViewStyle } from \"react-native\";\nimport type Animated from \"react-native-reanimated\";\nimport { useAnimatedReaction, type AnimatedStyleProp, runOnJS } from \"react-native-reanimated\";\n\nimport type { TAnimationStyle } from \"./BaseLayout\";\nimport { BaseLayout } from \"./BaseLayout\";\n\nimport type { VisibleRanges } from \"../hooks/useVisibleRanges\";\nimport { useVisibleRanges } from \"../hooks/useVisibleRanges\";\nimport type { CarouselRenderItem } from \"../types\";\nimport { computedRealIndexWithAutoFillData } from \"../utils/computed-with-auto-fill-data\";\n\ninterface Props {\n  data: any[]\n  dataLength: number\n  rawDataLength: number\n  loop: boolean\n  size: number\n  windowSize?: number\n  autoFillData: boolean\n  offsetX: Animated.SharedValue<number>\n  handlerOffset: Animated.SharedValue<number>\n  layoutConfig: TAnimationStyle\n  renderItem: CarouselRenderItem<any>\n  customAnimation?: ((value: number) => AnimatedStyleProp<ViewStyle>)\n}\n\nexport const ItemRenderer: FC<Props> = (props) => {\n  const {\n    data,\n    size,\n    windowSize,\n    handlerOffset,\n    offsetX,\n    dataLength,\n    rawDataLength,\n    loop,\n    autoFillData,\n    layoutConfig,\n    renderItem,\n    customAnimation,\n  } = props;\n\n  const visibleRanges = useVisibleRanges({\n    total: dataLength,\n    viewSize: size,\n    translation: handlerOffset,\n    windowSize,\n    loop,\n  });\n\n  const [displayedItems, setDisplayedItems] = React.useState<VisibleRanges>(null!);\n\n  useAnimatedReaction(\n    () => visibleRanges.value,\n    ranges => runOnJS(setDisplayedItems)(ranges),\n    [visibleRanges],\n  );\n\n  if (!displayedItems)\n    return null;\n\n  return (\n    <>\n      {\n        data.map((item, index) => {\n          const realIndex = computedRealIndexWithAutoFillData({\n            index,\n            dataLength: rawDataLength,\n            loop,\n            autoFillData,\n          });\n\n          const { negativeRange, positiveRange } = displayedItems;\n\n          const shouldRender = (index >= negativeRange[0] && index <= negativeRange[1])\n          || (index >= positiveRange[0] && index <= positiveRange[1]);\n\n          if (!shouldRender)\n            return null;\n\n          return (\n            <BaseLayout\n              key={index}\n              index={index}\n              handlerOffset={offsetX}\n              visibleRanges={visibleRanges}\n              animationStyle={customAnimation || layoutConfig}\n            >\n              {({ animationValue }) =>\n                renderItem({\n                  item,\n                  index: realIndex,\n                  animationValue,\n                })\n              }\n            </BaseLayout>\n          );\n        })\n      }\n    </>\n  );\n};\n"]}