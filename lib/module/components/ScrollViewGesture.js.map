{"version":3,"sources":["ScrollViewGesture.tsx"],"names":["React","useCallback","GestureDetector","Animated","cancelAnimation","measure","runOnJS","useAnimatedReaction","useAnimatedRef","useDerivedValue","useSharedValue","withDecay","Easing","usePanGestureProxy","CTX","dealWithAnimation","IScrollViewGesture","props","onConfigurePanGesture","vertical","pagingEnabled","snapEnabled","loop","scrollAnimationDuration","withAnimation","enabled","dataLength","overscrollEnabled","maxScrollDistancePerSwipe","minScrollDistancePerSwipe","fixedDirection","useContext","size","translation","testID","style","onScrollStart","onScrollEnd","onTouchBegin","onTouchEnd","accessibilityActions","accessible","accessibilityLabel","onAccessibilityAction","maxPage","isHorizontal","max","panOffset","touching","validStart","scrollEndTranslation","scrollEndVelocity","containerRef","maxScrollDistancePerSwipeIsSet","minScrollDistancePerSwipeIsSet","getLimit","width","containerWidth","withSpring","toValue","onFinished","defaultWithAnimation","type","config","duration","easing","easeOutQuart","isFinished","endWithSpring","origin","value","velocity","finalTranslation","deceleration","Math","abs","offset","computed","ceil","floor","page","finalPage","withProcessTranslation","min","nextPage","round","limit","sign","onFinish","activeDecay","resetBoundary","onGestureStart","_","onGestureUpdate","e","translationX","translationY","panTranslation","boundary","fixed","dynamic","translationValue","onGestureEnd","_success","velocityX","velocityY","totalTranslation","gesture","options","children","ScrollViewGesture"],"mappings":"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","sourcesContent":["import type { PropsWithChildren } from \"react\";\nimport React, { useCallback } from \"react\";\nimport type { AccessibilityProps, StyleProp, ViewStyle } from \"react-native\";\nimport type {\n  GestureStateChangeEvent,\n  PanGestureHandlerEventPayload,\n} from \"react-native-gesture-handler\";\nimport { GestureDetector } from \"react-native-gesture-handler\";\nimport Animated, {\n  cancelAnimation,\n  measure,\n  runOnJS,\n  useAnimatedReaction,\n  useAnimatedRef,\n  useDerivedValue,\n  useSharedValue,\n  withDecay,\n} from \"react-native-reanimated\";\n\nimport { Easing } from \"../constants\";\nimport { usePanGestureProxy } from \"../hooks/usePanGestureProxy\";\nimport { CTX } from \"../store\";\nimport type { WithTimingAnimation } from \"../types\";\nimport { dealWithAnimation } from \"../utils/deal-with-animation\";\n\ninterface Props {\n  size: number\n  infinite?: boolean\n  testID?: string\n  style?: StyleProp<ViewStyle>\n  onScrollStart?: () => void\n  onScrollEnd?: () => void\n  onTouchBegin?: () => void\n  onTouchEnd?: () => void\n  translation: Animated.SharedValue<number>\n  accessibilityActions: AccessibilityProps[\"accessibilityActions\"]\n  accessible: AccessibilityProps[\"accessible\"]\n  accessibilityLabel: AccessibilityProps[\"accessibilityLabel\"]\n  onAccessibilityAction: AccessibilityProps[\"onAccessibilityAction\"]\n}\n\nconst IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {\n  const {\n    props: {\n      onConfigurePanGesture,\n      vertical,\n      pagingEnabled,\n      snapEnabled,\n      loop,\n      scrollAnimationDuration,\n      withAnimation,\n      enabled,\n      dataLength,\n      overscrollEnabled,\n      maxScrollDistancePerSwipe,\n      minScrollDistancePerSwipe,\n      fixedDirection,\n    },\n  } = React.useContext(CTX);\n\n  const {\n    size,\n    translation,\n    testID,\n    style = {},\n    onScrollStart,\n    onScrollEnd,\n    onTouchBegin,\n    onTouchEnd,\n    accessibilityActions,\n    accessible,\n    accessibilityLabel,\n    onAccessibilityAction,\n  } = props;\n\n  const maxPage = dataLength;\n  const isHorizontal = useDerivedValue(() => !vertical, [vertical]);\n  const max = useSharedValue(0);\n  const panOffset = useSharedValue(0);\n  const touching = useSharedValue(false);\n  const validStart = useSharedValue(false);\n  const scrollEndTranslation = useSharedValue(0);\n  const scrollEndVelocity = useSharedValue(0);\n  const containerRef = useAnimatedRef<Animated.View>();\n  const maxScrollDistancePerSwipeIsSet\n        = typeof maxScrollDistancePerSwipe === \"number\";\n  const minScrollDistancePerSwipeIsSet\n        = typeof minScrollDistancePerSwipe === \"number\";\n\n  // Get the limit of the scroll.\n  const getLimit = React.useCallback(() => {\n    \"worklet\";\n\n    if (!loop && !overscrollEnabled) {\n      const { width: containerWidth = 0 } = measure(containerRef);\n\n      // If the item's total width is less than the container's width, then there is no need to scroll.\n      if (dataLength * size < containerWidth) return 0;\n\n      // Disable the \"overscroll\" effect\n      return dataLength * size - containerWidth;\n    }\n\n    return dataLength * size;\n  }, [loop, size, dataLength, overscrollEnabled]);\n\n  const withSpring = React.useCallback(\n    (toValue: number, onFinished?: () => void) => {\n      \"worklet\";\n      const defaultWithAnimation: WithTimingAnimation = {\n        type: \"timing\",\n        config: {\n          duration: scrollAnimationDuration + 100,\n          easing: Easing.easeOutQuart,\n        },\n      };\n\n      return dealWithAnimation(withAnimation ?? defaultWithAnimation)(\n        toValue,\n        (isFinished: boolean) => {\n          \"worklet\";\n          if (isFinished) onFinished && runOnJS(onFinished)();\n        },\n      );\n    },\n    [scrollAnimationDuration, withAnimation],\n  );\n\n  const endWithSpring = React.useCallback(\n    (onFinished?: () => void) => {\n      \"worklet\";\n      const origin = translation.value;\n      const velocity = scrollEndVelocity.value;\n      // Default to scroll in the direction of the slide (with deceleration)\n      let finalTranslation: number = withDecay({\n        velocity,\n        deceleration: 0.999,\n      });\n\n      // If the distance of the swipe exceeds the max scroll distance, keep the view at the current position\n      if (\n        maxScrollDistancePerSwipeIsSet\n                && Math.abs(scrollEndTranslation.value) > maxScrollDistancePerSwipe\n      ) {\n        finalTranslation = origin;\n      }\n      else {\n        /**\n                 * The page size is the same as the item size.\n                 * If direction is vertical, the page size is the height of the item.\n                 * If direction is horizontal, the page size is the width of the item.\n                 *\n                 * `page size` equals to `size` variable.\n                 * */\n        if (pagingEnabled) {\n          // distance with direction\n          const offset = -(scrollEndTranslation.value >= 0 ? 1 : -1); // 1 or -1\n          const computed = offset < 0 ? Math.ceil : Math.floor;\n          const page = computed(-translation.value / size);\n\n          if (loop) {\n            const finalPage = page + offset;\n            finalTranslation = withSpring(\n              withProcessTranslation(-finalPage * size),\n              onFinished,\n            );\n          }\n          else {\n            const finalPage = Math.min(\n              maxPage - 1,\n              Math.max(0, page + offset),\n            );\n            finalTranslation = withSpring(\n              withProcessTranslation(-finalPage * size),\n              onFinished,\n            );\n          }\n        }\n\n        if (!pagingEnabled && snapEnabled) {\n          // scroll to the nearest item\n          const nextPage\n                        = Math.round((origin + velocity * 0.4) / size) * size;\n          finalTranslation = withSpring(\n            withProcessTranslation(nextPage),\n            onFinished,\n          );\n        }\n      }\n\n      translation.value = finalTranslation;\n\n      function withProcessTranslation(translation: number) {\n        if (!loop && !overscrollEnabled) {\n          const limit = getLimit();\n          const sign = Math.sign(translation);\n          return (\n            sign\n                        * Math.max(0, Math.min(limit, Math.abs(translation)))\n          );\n        }\n\n        return translation;\n      }\n    },\n    [\n      withSpring,\n      size,\n      maxPage,\n      loop,\n      snapEnabled,\n      translation,\n      pagingEnabled,\n      scrollEndVelocity.value,\n      maxScrollDistancePerSwipe,\n      scrollEndTranslation.value,\n      maxScrollDistancePerSwipeIsSet,\n    ],\n  );\n\n  const onFinish = React.useCallback(\n    (isFinished: boolean) => {\n      \"worklet\";\n      if (isFinished) {\n        touching.value = false;\n        onScrollEnd && runOnJS(onScrollEnd)();\n      }\n    },\n    [onScrollEnd, touching],\n  );\n\n  const activeDecay = React.useCallback(() => {\n    \"worklet\";\n    touching.value = true;\n    translation.value = withDecay(\n      { velocity: scrollEndVelocity.value },\n      isFinished => onFinish(isFinished as boolean),\n    );\n  }, [onFinish, scrollEndVelocity.value, touching, translation]);\n\n  const resetBoundary = React.useCallback(() => {\n    \"worklet\";\n    if (touching.value) return;\n\n    if (translation.value > 0) {\n      if (scrollEndTranslation.value < 0) {\n        activeDecay();\n        return;\n      }\n      if (!loop) {\n        translation.value = withSpring(0);\n        return;\n      }\n    }\n\n    if (translation.value < -((maxPage - 1) * size)) {\n      if (scrollEndTranslation.value > 0) {\n        activeDecay();\n        return;\n      }\n      if (!loop) translation.value = withSpring(-((maxPage - 1) * size));\n    }\n  }, [\n    touching.value,\n    translation,\n    maxPage,\n    size,\n    scrollEndTranslation.value,\n    loop,\n    activeDecay,\n    withSpring,\n  ]);\n\n  useAnimatedReaction(\n    () => translation.value,\n    () => {\n      if (!pagingEnabled) resetBoundary();\n    },\n    [pagingEnabled, resetBoundary],\n  );\n\n  function withProcessTranslation(translation: number) {\n    \"worklet\";\n\n    if (!loop && !overscrollEnabled) {\n      const limit = getLimit();\n      const sign = Math.sign(translation);\n      return sign * Math.max(0, Math.min(limit, Math.abs(translation)));\n    }\n\n    return translation;\n  }\n\n  const onGestureStart = useCallback(\n    (_: PanGestureHandlerEventPayload) => {\n      \"worklet\";\n\n      touching.value = true;\n      validStart.value = true;\n      onScrollStart && runOnJS(onScrollStart)();\n\n      max.value = (maxPage - 1) * size;\n      if (!loop && !overscrollEnabled) max.value = getLimit();\n\n      panOffset.value = translation.value;\n    },\n    [\n      max,\n      size,\n      maxPage,\n      loop,\n      touching,\n      panOffset,\n      validStart,\n      translation,\n      overscrollEnabled,\n      getLimit,\n      onScrollStart,\n    ],\n  );\n\n  const onGestureUpdate = useCallback(\n    (e: PanGestureHandlerEventPayload) => {\n      \"worklet\";\n\n      if (validStart.value) {\n        validStart.value = false;\n        cancelAnimation(translation);\n      }\n      touching.value = true;\n      const { translationX, translationY } = e;\n\n      let panTranslation = isHorizontal.value\n        ? translationX\n        : translationY;\n\n      if (fixedDirection === \"negative\")\n        panTranslation = -Math.abs(panTranslation);\n      else if (fixedDirection === \"positive\")\n        panTranslation = +Math.abs(panTranslation);\n\n      if (!loop) {\n        if (translation.value > 0 || translation.value < -max.value) {\n          const boundary = translation.value > 0 ? 0 : -max.value;\n          const fixed = boundary - panOffset.value;\n          const dynamic = panTranslation - fixed;\n          translation.value = boundary + dynamic * 0.5;\n          return;\n        }\n      }\n\n      const translationValue = panOffset.value + panTranslation;\n      translation.value = translationValue;\n    },\n    [\n      isHorizontal,\n      max,\n      panOffset,\n      loop,\n      overscrollEnabled,\n      fixedDirection,\n      translation,\n      validStart,\n      touching,\n    ],\n  );\n\n  const onGestureEnd = useCallback(\n    (\n      e: GestureStateChangeEvent<PanGestureHandlerEventPayload>,\n      _success: boolean,\n    ) => {\n      \"worklet\";\n\n      const { velocityX, velocityY, translationX, translationY } = e;\n      scrollEndVelocity.value = isHorizontal.value\n        ? velocityX\n        : velocityY;\n\n      let panTranslation = isHorizontal.value\n        ? translationX\n        : translationY;\n\n      if (fixedDirection === \"negative\")\n        panTranslation = -Math.abs(panTranslation);\n      else if (fixedDirection === \"positive\")\n        panTranslation = +Math.abs(panTranslation);\n\n      scrollEndTranslation.value = panTranslation;\n\n      const totalTranslation\n                = scrollEndVelocity.value + scrollEndTranslation.value;\n\n      /**\n             * If the maximum scroll distance is set and the translation `exceeds the maximum scroll distance`,\n             * the carousel will keep the view at the current position.\n             */\n      if (\n        maxScrollDistancePerSwipeIsSet\n                && Math.abs(totalTranslation) > maxScrollDistancePerSwipe\n      ) {\n        const nextPage\n                    = Math.round(\n                      (panOffset.value\n                            + maxScrollDistancePerSwipe\n                                * Math.sign(totalTranslation))\n                            / size,\n                    ) * size;\n        translation.value = withSpring(\n          withProcessTranslation(nextPage),\n          onScrollEnd,\n        );\n      }\n      else if (\n      /**\n                 * If the minimum scroll distance is set and the translation `didn't exceeds the minimum scroll distance`,\n                 * the carousel will keep the view at the current position.\n                 */\n        minScrollDistancePerSwipeIsSet\n                && Math.abs(totalTranslation) < minScrollDistancePerSwipe\n      ) {\n        const nextPage\n                    = Math.round(\n                      (panOffset.value\n                            + minScrollDistancePerSwipe\n                                * Math.sign(totalTranslation))\n                            / size,\n                    ) * size;\n        translation.value = withSpring(\n          withProcessTranslation(nextPage),\n          onScrollEnd,\n        );\n      }\n      else {\n        endWithSpring(onScrollEnd);\n      }\n\n      if (!loop) touching.value = false;\n    },\n    [\n      size,\n      loop,\n      touching,\n      panOffset,\n      translation,\n      isHorizontal,\n      scrollEndVelocity,\n      scrollEndTranslation,\n      fixedDirection,\n      maxScrollDistancePerSwipeIsSet,\n      maxScrollDistancePerSwipe,\n      maxScrollDistancePerSwipeIsSet,\n      minScrollDistancePerSwipe,\n      endWithSpring,\n      withSpring,\n      onScrollEnd,\n    ],\n  );\n\n  const gesture = usePanGestureProxy({\n    onConfigurePanGesture,\n    onGestureStart,\n    onGestureUpdate,\n    onGestureEnd,\n    options: { enabled },\n  });\n\n  return (\n    <GestureDetector gesture={gesture}>\n      <Animated.View\n        ref={containerRef}\n        testID={testID}\n        style={style}\n        onTouchStart={onTouchBegin}\n        onTouchEnd={onTouchEnd}\n        accessibilityActions={accessibilityActions}\n        accessible={accessible}\n        accessibilityLabel={accessibilityLabel}\n        onAccessibilityAction={onAccessibilityAction}\n      >\n        {props.children}\n      </Animated.View>\n    </GestureDetector>\n  );\n};\n\nexport const ScrollViewGesture = IScrollViewGesture;\n"]}