{"version":3,"sources":["ScrollViewGesture.tsx"],"names":["React","useCallback","GestureDetector","Animated","cancelAnimation","measure","runOnJS","useAnimatedReaction","useAnimatedRef","useDerivedValue","useSharedValue","withDecay","Easing","usePanGestureProxy","CTX","dealWithAnimation","IScrollViewGesture","props","onConfigurePanGesture","vertical","pagingEnabled","snapEnabled","loop","scrollAnimationDuration","withAnimation","enabled","dataLength","overscrollEnabled","maxScrollDistancePerSwipe","minScrollDistancePerSwipe","fixedDirection","useContext","size","translation","testID","style","onScrollStart","onScrollEnd","onTouchBegin","onTouchEnd","maxPage","isHorizontal","max","panOffset","undefined","touching","validStart","scrollEndTranslation","scrollEndVelocity","containerRef","maxScrollDistancePerSwipeIsSet","minScrollDistancePerSwipeIsSet","getLimit","width","containerWidth","withSpring","toValue","onFinished","defaultWithAnimation","type","config","duration","easing","easeOutQuart","isFinished","endWithSpring","scrollEndTranslationValue","scrollEndVelocityValue","origin","value","velocity","finalTranslation","deceleration","Math","abs","offset","computed","ceil","floor","page","finalPage","withProcessTranslation","min","nextPage","round","limit","sign","onFinish","activeDecay","resetBoundary","onGestureStart","_","onGestureUpdate","e","translationX","translationY","panTranslation","boundary","fixed","dynamic","translationValue","onGestureEnd","_success","velocityX","velocityY","totalTranslation","gesture","options","children","ScrollViewGesture"],"mappings":"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","sourcesContent":["import type { PropsWithChildren } from \"react\";\nimport React, { useCallback } from \"react\";\nimport type { StyleProp, ViewStyle } from \"react-native\";\nimport type { GestureStateChangeEvent, PanGestureHandlerEventPayload } from \"react-native-gesture-handler\";\nimport { GestureDetector } from \"react-native-gesture-handler\";\nimport Animated, {\n  cancelAnimation,\n  measure,\n  runOnJS,\n  useAnimatedReaction,\n  useAnimatedRef,\n  useDerivedValue,\n  useSharedValue,\n  withDecay,\n} from \"react-native-reanimated\";\n\nimport { Easing } from \"../constants\";\nimport { usePanGestureProxy } from \"../hooks/usePanGestureProxy\";\nimport { CTX } from \"../store\";\nimport type { WithTimingAnimation } from \"../types\";\nimport { dealWithAnimation } from \"../utils/deal-with-animation\";\n\ninterface Props {\n  size: number\n  infinite?: boolean\n  testID?: string\n  style?: StyleProp<ViewStyle>\n  onScrollStart?: () => void\n  onScrollEnd?: () => void\n  onTouchBegin?: () => void\n  onTouchEnd?: () => void\n  translation: Animated.SharedValue<number>\n}\n\nconst IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {\n  const {\n    props: {\n      onConfigurePanGesture,\n      vertical,\n      pagingEnabled,\n      snapEnabled,\n      loop,\n      scrollAnimationDuration,\n      withAnimation,\n      enabled,\n      dataLength,\n      overscrollEnabled,\n      maxScrollDistancePerSwipe,\n      minScrollDistancePerSwipe,\n      fixedDirection,\n    },\n  } = React.useContext(CTX);\n\n  const {\n    size,\n    translation,\n    testID,\n    style = {},\n    onScrollStart,\n    onScrollEnd,\n    onTouchBegin,\n    onTouchEnd,\n  } = props;\n\n  const maxPage = dataLength;\n  const isHorizontal = useDerivedValue(() => !vertical, [vertical]);\n  const max = useSharedValue(0);\n  const panOffset = useSharedValue<number | undefined>(undefined); // set to undefined when not actively in a pan gesture\n  const touching = useSharedValue(false);\n  const validStart = useSharedValue(false);\n  const scrollEndTranslation = useSharedValue(0);\n  const scrollEndVelocity = useSharedValue(0);\n  const containerRef = useAnimatedRef<Animated.View>();\n  const maxScrollDistancePerSwipeIsSet = typeof maxScrollDistancePerSwipe === \"number\";\n  const minScrollDistancePerSwipeIsSet = typeof minScrollDistancePerSwipe === \"number\";\n\n  // Get the limit of the scroll.\n  const getLimit = React.useCallback(() => {\n    \"worklet\";\n\n    if (!loop && !overscrollEnabled) {\n      const { width: containerWidth = 0 } = measure(containerRef);\n\n      // If the item's total width is less than the container's width, then there is no need to scroll.\n      if (dataLength * size < containerWidth)\n        return 0;\n\n      // Disable the \"overscroll\" effect\n      return dataLength * size - containerWidth;\n    }\n\n    return dataLength * size;\n  }, [loop, size, dataLength, overscrollEnabled]);\n\n  const withSpring = React.useCallback(\n    (toValue: number, onFinished?: () => void) => {\n      \"worklet\";\n      const defaultWithAnimation: WithTimingAnimation = {\n        type: \"timing\",\n        config: {\n          duration: scrollAnimationDuration + 100,\n          easing: Easing.easeOutQuart,\n        },\n      };\n\n      return dealWithAnimation(withAnimation ?? defaultWithAnimation)(\n        toValue,\n        (isFinished: boolean) => {\n          \"worklet\";\n          if (isFinished)\n            onFinished && runOnJS(onFinished)();\n        },\n      );\n    },\n    [scrollAnimationDuration, withAnimation],\n  );\n\n  const endWithSpring = React.useCallback(\n    (scrollEndTranslationValue: number,\n      scrollEndVelocityValue: number,\n      onFinished?: () => void,\n    ) => {\n      \"worklet\";\n      const origin = translation.value;\n      const velocity = scrollEndVelocityValue;\n      // Default to scroll in the direction of the slide (with deceleration)\n      let finalTranslation: number = withDecay({ velocity, deceleration: 0.999 });\n\n      // If the distance of the swipe exceeds the max scroll distance, keep the view at the current position\n      if (maxScrollDistancePerSwipeIsSet && Math.abs(scrollEndTranslationValue) > maxScrollDistancePerSwipe) {\n        finalTranslation = origin;\n      }\n      else {\n        /**\n         * The page size is the same as the item size.\n         * If direction is vertical, the page size is the height of the item.\n         * If direction is horizontal, the page size is the width of the item.\n        *\n        * `page size` equals to `size` variable.\n        * */\n        if (pagingEnabled) {\n          // distance with direction\n          const offset = -(scrollEndTranslationValue >= 0 ? 1 : -1); // 1 or -1\n          const computed = offset < 0 ? Math.ceil : Math.floor;\n          const page = computed(-origin / size);\n\n          if (loop) {\n            const finalPage = page + offset;\n            finalTranslation = withSpring(withProcessTranslation(-finalPage * size), onFinished);\n          }\n          else {\n            const finalPage = Math.min(maxPage - 1, Math.max(0, page + offset));\n            finalTranslation = withSpring(withProcessTranslation(-finalPage * size), onFinished);\n          }\n        }\n\n        if (!pagingEnabled && snapEnabled) {\n          // scroll to the nearest item\n          const nextPage = Math.round((origin + velocity * 0.4) / size) * size;\n          finalTranslation = withSpring(withProcessTranslation(nextPage), onFinished);\n        }\n      }\n\n      translation.value = finalTranslation;\n\n      function withProcessTranslation(translation: number) {\n        if (!loop && !overscrollEnabled) {\n          const limit = getLimit();\n          const sign = Math.sign(translation);\n          return sign * Math.max(0, Math.min(limit, Math.abs(translation)));\n        }\n\n        return translation;\n      }\n    },\n    [\n      withSpring,\n      size,\n      maxPage,\n      loop,\n      snapEnabled,\n      translation,\n      pagingEnabled,\n      maxScrollDistancePerSwipe,\n      maxScrollDistancePerSwipeIsSet,\n    ],\n  );\n\n  const onFinish = React.useCallback(\n    (isFinished: boolean) => {\n      \"worklet\";\n      if (isFinished) {\n        touching.value = false;\n        onScrollEnd && runOnJS(onScrollEnd)();\n      }\n    },\n    [onScrollEnd, touching],\n  );\n\n  const activeDecay = React.useCallback(() => {\n    \"worklet\";\n    touching.value = true;\n    translation.value = withDecay(\n      { velocity: scrollEndVelocity.value },\n      isFinished => onFinish(isFinished as boolean),\n    );\n  }, [onFinish, scrollEndVelocity.value, touching, translation]);\n\n  const resetBoundary = React.useCallback(() => {\n    \"worklet\";\n    if (touching.value)\n      return;\n\n    if (translation.value > 0) {\n      if (scrollEndTranslation.value < 0) {\n        activeDecay();\n        return;\n      }\n      if (!loop) {\n        translation.value = withSpring(0);\n        return;\n      }\n    }\n\n    if (translation.value < -((maxPage - 1) * size)) {\n      if (scrollEndTranslation.value > 0) {\n        activeDecay();\n        return;\n      }\n      if (!loop)\n        translation.value = withSpring(-((maxPage - 1) * size));\n    }\n  }, [\n    touching.value,\n    translation,\n    maxPage,\n    size,\n    scrollEndTranslation.value,\n    loop,\n    activeDecay,\n    withSpring,\n  ]);\n\n  useAnimatedReaction(\n    () => translation.value,\n    () => {\n      if (!pagingEnabled)\n        resetBoundary();\n    },\n    [pagingEnabled, resetBoundary],\n  );\n\n  function withProcessTranslation(translation: number) {\n    \"worklet\";\n\n    if (!loop && !overscrollEnabled) {\n      const limit = getLimit();\n      const sign = Math.sign(translation);\n      return sign * Math.max(0, Math.min(limit, Math.abs(translation)));\n    }\n\n    return translation;\n  }\n\n  const onGestureStart = useCallback((_: PanGestureHandlerEventPayload) => {\n    \"worklet\";\n\n    touching.value = true;\n    validStart.value = true;\n    onScrollStart && runOnJS(onScrollStart)();\n\n    max.value = (maxPage - 1) * size;\n    if (!loop && !overscrollEnabled)\n      max.value = getLimit();\n\n    panOffset.value = translation.value;\n  }, [\n    max,\n    size,\n    maxPage,\n    loop,\n    touching,\n    panOffset,\n    validStart,\n    translation,\n    overscrollEnabled,\n    getLimit,\n    onScrollStart,\n  ]);\n\n  const onGestureUpdate = useCallback((e: PanGestureHandlerEventPayload) => {\n    \"worklet\";\n\n    if (panOffset.value === undefined) {\n      // This may happen if `onGestureStart` is called as a part of the\n      // JS thread (instead of the UI thread / worklet). If so, when\n      // `onGestureStart` sets panOffset.value, the set will be asynchronous,\n      // and so it may not actually occur before `onGestureUpdate` is called.\n      //\n      // Keeping this value as `undefined` when it is not active protects us\n      // from the situation where we may use the previous value for panOffset\n      // instead; this would cause a visual flicker in the carousel.\n\n      // console.warn(\"onGestureUpdate: panOffset is undefined\");\n      return;\n    }\n\n    if (validStart.value) {\n      validStart.value = false;\n      cancelAnimation(translation);\n    }\n    touching.value = true;\n    const { translationX, translationY } = e;\n\n    let panTranslation = isHorizontal.value\n      ? translationX\n      : translationY;\n\n    if (fixedDirection === \"negative\")\n      panTranslation = -Math.abs(panTranslation);\n\n    else if (fixedDirection === \"positive\")\n      panTranslation = +Math.abs(panTranslation);\n\n    if (!loop) {\n      if ((translation.value > 0 || translation.value < -max.value)) {\n        const boundary = translation.value > 0 ? 0 : -max.value;\n        const fixed = boundary - panOffset.value;\n        const dynamic = panTranslation - fixed;\n        translation.value = boundary + dynamic * 0.5;\n        return;\n      }\n    }\n\n    const translationValue = panOffset.value + panTranslation;\n    translation.value = translationValue;\n  }, [\n    isHorizontal,\n    max,\n    panOffset,\n    loop,\n    overscrollEnabled,\n    fixedDirection,\n    translation,\n    validStart,\n    touching,\n  ]);\n\n  const onGestureEnd = useCallback((e: GestureStateChangeEvent<PanGestureHandlerEventPayload>, _success: boolean) => {\n    \"worklet\";\n\n    if (panOffset.value === undefined) {\n      // console.warn(\"onGestureEnd: panOffset is undefined\");\n      return;\n    }\n\n    const { velocityX, velocityY, translationX, translationY } = e;\n    const scrollEndVelocityValue = isHorizontal.value\n      ? velocityX\n      : velocityY;\n    scrollEndVelocity.value = scrollEndVelocityValue; // may update async: see https://docs.swmansion.com/react-native-reanimated/docs/core/useSharedValue#remarks\n\n    let panTranslation = isHorizontal.value\n      ? translationX\n      : translationY;\n\n    if (fixedDirection === \"negative\")\n      panTranslation = -Math.abs(panTranslation);\n\n    else if (fixedDirection === \"positive\")\n      panTranslation = +Math.abs(panTranslation);\n\n    scrollEndTranslation.value = panTranslation; // may update async: see https://docs.swmansion.com/react-native-reanimated/docs/core/useSharedValue#remarks\n\n    const totalTranslation = scrollEndVelocityValue + panTranslation;\n\n    /**\n     * If the maximum scroll distance is set and the translation `exceeds the maximum scroll distance`,\n     * the carousel will keep the view at the current position.\n    */\n    if (\n      maxScrollDistancePerSwipeIsSet && Math.abs(totalTranslation) > maxScrollDistancePerSwipe\n    ) {\n      const nextPage = Math.round((panOffset.value + maxScrollDistancePerSwipe * Math.sign(totalTranslation)) / size) * size;\n      translation.value = withSpring(withProcessTranslation(nextPage), onScrollEnd);\n    }\n    /**\n     * If the minimum scroll distance is set and the translation `didn't exceeds the minimum scroll distance`,\n     * the carousel will keep the view at the current position.\n    */\n    else if (\n      minScrollDistancePerSwipeIsSet && Math.abs(totalTranslation) < minScrollDistancePerSwipe\n    ) {\n      const nextPage = Math.round((panOffset.value + minScrollDistancePerSwipe * Math.sign(totalTranslation)) / size) * size;\n      translation.value = withSpring(withProcessTranslation(nextPage), onScrollEnd);\n    }\n    else {\n      endWithSpring(panTranslation, scrollEndVelocityValue, onScrollEnd);\n    }\n\n    if (!loop)\n      touching.value = false;\n\n    panOffset.value = undefined;\n  }, [\n    size,\n    loop,\n    touching,\n    panOffset,\n    translation,\n    isHorizontal,\n    scrollEndVelocity,\n    scrollEndTranslation,\n    fixedDirection,\n    maxScrollDistancePerSwipeIsSet,\n    maxScrollDistancePerSwipe,\n    maxScrollDistancePerSwipeIsSet,\n    minScrollDistancePerSwipe,\n    endWithSpring,\n    withSpring,\n    onScrollEnd,\n  ]);\n\n  const gesture = usePanGestureProxy({\n    onConfigurePanGesture,\n    onGestureStart,\n    onGestureUpdate,\n    onGestureEnd,\n    options: { enabled },\n  });\n\n  return (\n    <GestureDetector gesture={gesture}>\n      <Animated.View\n        ref={containerRef}\n        testID={testID}\n        style={style}\n        onTouchStart={onTouchBegin}\n        onTouchEnd={onTouchEnd}\n      >\n        {props.children}\n      </Animated.View>\n    </GestureDetector>\n  );\n};\n\nexport const ScrollViewGesture = IScrollViewGesture;\n"]}