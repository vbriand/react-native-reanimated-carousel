{"version":3,"names":["useMemo","Gesture","useUpdateGestureConfig","usePanGestureProxy","customization","onConfigurePanGesture","onGestureStart","onGestureUpdate","onGestureEnd","options","gesture","Pan","originalGestures","onBegin","onStart","onUpdate","onEnd","onFinalize","userDefinedConflictGestures","undefined","fakeOnBegin","cb","fakeOnStart","fakeOnUpdate","fakeOnEnd","fakeOnFinalize","e","success"],"sources":["usePanGestureProxy.ts"],"sourcesContent":["import { useMemo } from \"react\";\nimport type { GestureStateChangeEvent, GestureUpdateEvent, PanGesture, PanGestureHandlerEventPayload } from \"react-native-gesture-handler\";\nimport { Gesture } from \"react-native-gesture-handler\";\n\nimport type { GestureConfig } from \"./useUpdateGestureConfig\";\nimport { useUpdateGestureConfig } from \"./useUpdateGestureConfig\";\n\nexport const usePanGestureProxy = (\n  customization: {\n    onConfigurePanGesture?: (gesture: PanGesture) => void\n    onGestureStart: (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => void\n    onGestureUpdate: (event: GestureUpdateEvent<PanGestureHandlerEventPayload>) => void\n    onGestureEnd: (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>, success: boolean) => void\n    options?: GestureConfig\n  },\n) => {\n  const {\n    onConfigurePanGesture,\n    onGestureStart,\n    onGestureUpdate,\n    onGestureEnd,\n    options = {},\n  } = customization;\n\n  const gesture = useMemo(() => {\n    const gesture = Gesture.Pan();\n\n    // Save the original gesture callbacks\n    const originalGestures = {\n      onBegin: gesture.onBegin,\n      onStart: gesture.onStart,\n      onUpdate: gesture.onUpdate,\n      onEnd: gesture.onEnd,\n      onFinalize: gesture.onFinalize,\n    };\n\n    // Save the user defined gesture callbacks\n    const userDefinedConflictGestures: {\n      onBegin?: Parameters<(typeof gesture)[\"onBegin\"]>[0]\n      onStart?: Parameters<(typeof gesture)[\"onStart\"]>[0]\n      onUpdate?: Parameters<(typeof gesture)[\"onUpdate\"]>[0]\n      onEnd?: Parameters<(typeof gesture)[\"onEnd\"]>[0]\n      onFinalize?: Parameters<(typeof gesture)[\"onFinalize\"]>[0]\n    } = {\n      onBegin: undefined,\n      onStart: undefined,\n      onUpdate: undefined,\n      onEnd: undefined,\n      onFinalize: undefined,\n    };\n\n    const fakeOnBegin: typeof gesture.onBegin = (cb) => {\n      // Using fakeOnBegin to save the user defined callback\n      userDefinedConflictGestures.onBegin = cb;\n      return gesture;\n    };\n\n    const fakeOnStart: typeof gesture.onStart = (cb) => {\n      // Using fakeOnStart to save the user defined callback\n      userDefinedConflictGestures.onStart = cb;\n      return gesture;\n    };\n\n    const fakeOnUpdate: typeof gesture.onUpdate = (cb) => {\n      // Using fakeOnUpdate to save the user defined callback\n      userDefinedConflictGestures.onUpdate = cb;\n      return gesture;\n    };\n\n    const fakeOnEnd: typeof gesture.onEnd = (cb) => {\n      // Using fakeOnEnd to save the user defined callback\n      userDefinedConflictGestures.onEnd = cb;\n      return gesture;\n    };\n\n    const fakeOnFinalize: typeof gesture.onFinalize = (cb) => {\n      // Using fakeOnFinalize to save the user defined callback\n      userDefinedConflictGestures.onFinalize = cb;\n      return gesture;\n    };\n\n    // Setup the fake callbacks\n    gesture.onBegin = fakeOnBegin;\n    gesture.onStart = fakeOnStart;\n    gesture.onUpdate = fakeOnUpdate;\n    gesture.onEnd = fakeOnEnd;\n    gesture.onFinalize = fakeOnFinalize;\n\n    if (onConfigurePanGesture)\n      // Get the gesture with the user defined configuration\n      onConfigurePanGesture(gesture);\n\n    // Restore the original callbacks\n    gesture.onBegin = originalGestures.onBegin;\n    gesture.onStart = originalGestures.onStart;\n    gesture.onUpdate = originalGestures.onUpdate;\n    gesture.onEnd = originalGestures.onEnd;\n    gesture.onFinalize = originalGestures.onFinalize;\n\n    // Setup the original callbacks with the user defined callbacks\n    gesture\n      .onBegin((e) => {\n        \"worklet\";\n\n        if (userDefinedConflictGestures.onBegin)\n          userDefinedConflictGestures.onBegin(e);\n      })\n      .onStart((e) => {\n        \"worklet\";\n        onGestureStart(e);\n\n        if (userDefinedConflictGestures.onStart)\n          userDefinedConflictGestures.onStart(e);\n      })\n      .onUpdate((e) => {\n        \"worklet\";\n        onGestureUpdate(e);\n\n        if (userDefinedConflictGestures.onUpdate)\n          userDefinedConflictGestures.onUpdate(e);\n      })\n      .onEnd((e, success) => {\n        \"worklet\";\n        onGestureEnd(e, success);\n\n        if (userDefinedConflictGestures.onEnd)\n          userDefinedConflictGestures.onEnd(e, success);\n      })\n      .onFinalize((e, success) => {\n        \"worklet\";\n\n        if (userDefinedConflictGestures.onFinalize)\n          userDefinedConflictGestures.onFinalize(e, success);\n      })\n    ;\n\n    return gesture;\n  }, [\n    onGestureStart,\n    onGestureUpdate,\n    onGestureEnd,\n    onConfigurePanGesture,\n  ]);\n\n  useUpdateGestureConfig(gesture, options);\n\n  return gesture;\n};\n"],"mappings":"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","ignoreList":[]}