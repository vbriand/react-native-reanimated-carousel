{"version":3,"names":["React","Text","Gesture","GestureDetector","GestureHandlerRootView","State","cleanup","render","fireGestureHandler","getByGestureTestId","usePanGestureProxy","beforeEach","mockedEventHandlers","begin","jest","fn","start","active","end","fail","cancel","finish","mockedEventHandlersFromUser","describe","SingleHandler","handlers","handlersFromUser","treatStartAsUpdate","pan","onConfigurePanGesture","gesture","onBegin","onUpdate","onEnd","onFinalize","withTestId","onGestureStart","onGestureUpdate","onGestureEnd","options","enabled","createElement","RacingHandlers","tapHandlers","panHandlers","tap","Tap","_","Race","it","state","BEGAN","ACTIVE","END","expect","toBeCalledWith","objectContaining","toBeCalled","not","panHandlersFromUser","translationX","toBeCalledTimes","toHaveBeenLastCalledWith","spyOn","console","error","oldState","UNDETERMINED","x","y","toThrow","each","FAILED","CANCELLED","lastState","any","Object","RacingTapAndPan","Exclusive","nthCalledWith","lastCalledWith","anything","toHaveBeenNthCalledWith","toHaveBeenCalledTimes"],"sources":["usePanGestureProxy.test.tsx"],"sourcesContent":["import React from \"react\";\nimport { Text } from \"react-native\";\nimport type { PanGesture, PanGestureHandler, TapGesture } from \"react-native-gesture-handler\";\nimport { Gesture, GestureDetector, GestureHandlerRootView, State } from \"react-native-gesture-handler\";\n\nimport { cleanup, render } from \"@testing-library/react-native\";\nimport { fireGestureHandler, getByGestureTestId } from \"react-native-gesture-handler/jest-utils\";\n\nimport { usePanGestureProxy } from \"./usePanGestureProxy\";\n\nbeforeEach(cleanup);\n\nconst mockedEventHandlers = () => {\n  return {\n    begin: jest.fn(),\n    start: jest.fn(),\n    active: jest.fn(),\n    end: jest.fn(),\n    fail: jest.fn(),\n    cancel: jest.fn(),\n    finish: jest.fn(),\n  };\n};\n\nconst mockedEventHandlersFromUser = () => {\n  return {\n    begin: jest.fn(),\n    start: jest.fn(),\n    active: jest.fn(),\n    end: jest.fn(),\n    fail: jest.fn(),\n    cancel: jest.fn(),\n    finish: jest.fn(),\n  };\n};\n\ndescribe(\"Using RNGH v2 gesture API\", () => {\n  interface SingleHandlerProps {\n    handlers: ReturnType<typeof mockedEventHandlers>\n    handlersFromUser: ReturnType<typeof mockedEventHandlers>\n    treatStartAsUpdate?: boolean\n  }\n\n  function SingleHandler({ handlers, handlersFromUser, treatStartAsUpdate }: SingleHandlerProps) {\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (gesture: PanGesture) => {\n        // This is user's customizations\n        gesture\n          .onBegin(handlersFromUser.begin)\n          .onUpdate(handlersFromUser.active)\n          .onEnd(handlersFromUser.end)\n          .onFinalize(handlers.finish)\n          .withTestId(\"pan\");\n      },\n      onGestureStart: treatStartAsUpdate ? handlers.active : handlers.start,\n      onGestureUpdate: handlers.active,\n      onGestureEnd: handlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={pan}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  interface RacingHandlersProps {\n    tapHandlers: ReturnType<typeof mockedEventHandlers>\n    panHandlers: ReturnType<typeof mockedEventHandlers>\n  }\n\n  function RacingHandlers({ tapHandlers, panHandlers }: RacingHandlersProps) {\n    const tap = Gesture.Tap()\n      .onBegin(tapHandlers.begin)\n      .onEnd(tapHandlers.end)\n      .withTestId(\"tap\");\n\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (_: PanGesture) => {\n        _\n          .onBegin(panHandlers.begin)\n          .onFinalize(panHandlers.finish)\n          .withTestId(\"pan\");\n      },\n      onGestureStart: panHandlers.start,\n      onGestureUpdate: panHandlers.active,\n      onGestureEnd: panHandlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={Gesture.Race(tap, pan)}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  it(\"sends events to handlers\", () => {\n    const tapHandlers = mockedEventHandlers();\n    const panHandlers = mockedEventHandlers();\n    render(\n      <RacingHandlers tapHandlers={tapHandlers} panHandlers={panHandlers} />,\n    );\n\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN },\n      { state: State.ACTIVE },\n      { state: State.END },\n    ]);\n    expect(panHandlers.begin).toBeCalledWith(\n      expect.objectContaining({ state: State.BEGAN }),\n    );\n    expect(panHandlers.finish).toBeCalled();\n    expect(tapHandlers.begin).not.toBeCalled();\n  });\n\n  it(\"sends events with additional data to handlers\", () => {\n    const panHandlers = mockedEventHandlers();\n    const panHandlersFromUser = mockedEventHandlersFromUser();\n    render(<SingleHandler handlers={panHandlers} handlersFromUser={panHandlersFromUser} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN, translationX: 0 },\n      { state: State.ACTIVE, translationX: 10 },\n      { translationX: 20 },\n      { translationX: 20 },\n      { state: State.END, translationX: 30 },\n    ]);\n\n    expect(panHandlersFromUser.begin).toBeCalledTimes(1);\n    expect(panHandlersFromUser.active).toBeCalledTimes(2);\n    expect(panHandlersFromUser.end).toBeCalledTimes(1);\n\n    expect(panHandlers.active).toBeCalledTimes(3);\n    expect(panHandlers.active).toHaveBeenLastCalledWith(\n      expect.objectContaining({ translationX: 20 }),\n    );\n  });\n\n  it(\"does not include console.error in the output\", () => {\n    // if react-native-gesture-handler detects that some handlers are\n    // workletized and some are not, it will log an error to the\n    // console. We'd like to make sure that this doesn't happen.\n\n    // The error that would be shown looks like:\n    // [react-native-gesture-handler] Some of the callbacks in the gesture are worklets and some are not. Either make sure that all calbacks are marked as 'worklet' if you wish to run them on the UI thread or use '.runOnJS(true)' modifier on the gesture explicitly to run all callbacks on the JS thread.\n\n    const panHandlers = mockedEventHandlers();\n    const panHandlersFromUser = mockedEventHandlersFromUser();\n\n    jest.spyOn(console, \"error\");\n\n    render(<SingleHandler handlers={panHandlers} handlersFromUser={panHandlersFromUser} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN },\n      { state: State.ACTIVE },\n      { state: State.END },\n    ]);\n\n    expect(console.error).not.toBeCalled();\n  });\n});\n\ndescribe(\"Event list validation\", () => {\n  interface SingleHandlerProps {\n    handlers: ReturnType<typeof mockedEventHandlers>\n    handlersFromUser: ReturnType<typeof mockedEventHandlers>\n    treatStartAsUpdate?: boolean\n  }\n\n  function SingleHandler({ handlers, handlersFromUser, treatStartAsUpdate }: SingleHandlerProps) {\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (_: PanGesture) => {\n        _\n          .onBegin(handlersFromUser.begin)\n          .onUpdate(handlersFromUser.active)\n          .onEnd(handlersFromUser.end)\n          .onFinalize(handlers.finish)\n          .withTestId(\"pan\");\n      },\n      onGestureStart: treatStartAsUpdate ? handlers.active : handlers.start,\n      onGestureUpdate: handlers.active,\n      onGestureEnd: handlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={pan}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  it(\"throws error when oldState doesn't correspond to previous event's state\", () => {\n    const panHandlers = mockedEventHandlers();\n    const panHandlersFromUser = mockedEventHandlersFromUser();\n    render(<SingleHandler handlers={panHandlers} handlersFromUser={panHandlersFromUser} />);\n\n    expect(() => {\n      fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n        { oldState: State.UNDETERMINED, state: State.BEGAN, x: 0, y: 10 },\n        { oldState: State.UNDETERMINED, state: State.ACTIVE, x: 1, y: 11 },\n      ]);\n    }).toThrow(\n      \"when state changes, oldState should be the same as previous event' state\",\n    );\n  });\n\n  it.each([[State.END], [State.FAILED], [State.CANCELLED]])(\n    \"correctly handles events ending with state %s\",\n    (lastState) => {\n      const panHandlers = mockedEventHandlers();\n      const panHandlersFromUser = mockedEventHandlersFromUser();\n      render(<SingleHandler handlers={panHandlers} handlersFromUser={panHandlersFromUser} />);\n      fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n        { state: State.BEGAN },\n        { state: State.ACTIVE },\n        { state: lastState },\n      ]);\n\n      expect(panHandlersFromUser.begin).toBeCalledTimes(1);\n      expect(panHandlersFromUser.active).toBeCalledTimes(0);\n      expect(panHandlersFromUser.end).toBeCalledTimes(1);\n\n      if (lastState === State.END)\n        expect(panHandlers.end).toBeCalled();\n\n      else\n        expect(panHandlers.finish).toBeCalledWith(expect.any(Object), false);\n    },\n  );\n});\n\ndescribe(\"Filling event list with defaults\", () => {\n  interface RacingTapAndPanProps {\n    handlers: ReturnType<typeof mockedEventHandlers>\n    treatStartAsUpdate?: boolean\n  }\n\n  function RacingTapAndPan({\n    handlers,\n    treatStartAsUpdate,\n  }: RacingTapAndPanProps) {\n    const tap = Gesture.Tap()\n      .onBegin(handlers.begin)\n      .onEnd(handlers.end)\n      .withTestId(\"tap\");\n\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (_: PanGesture) => {\n        _\n          .onBegin(handlers.begin)\n          .onFinalize(handlers.finish)\n          .withTestId(\"pan\");\n      },\n      onGestureStart: treatStartAsUpdate ? handlers.active : handlers.start,\n      onGestureUpdate: handlers.active,\n      onGestureEnd: handlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={Gesture.Exclusive(pan, tap)}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  it(\"fills oldState if not passed\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGestureHandler>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN },\n      { state: State.ACTIVE },\n      { state: State.ACTIVE },\n      { state: State.ACTIVE },\n      { state: State.END },\n    ]);\n\n    expect(handlers.begin).toBeCalledWith(\n      expect.objectContaining({ oldState: State.UNDETERMINED }),\n    );\n    expect(handlers.active).nthCalledWith(\n      1,\n      expect.objectContaining({ oldState: State.BEGAN }),\n    );\n    expect(handlers.active).lastCalledWith(\n      expect.not.objectContaining({ oldState: expect.anything() }),\n    );\n    expect(handlers.end).toBeCalledWith(\n      expect.objectContaining({ oldState: State.ACTIVE }),\n      true,\n    );\n  });\n\n  it(\"fills missing ACTIVE states\", () => {\n    const panHandlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={panHandlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN, x: 0, y: 10 },\n      { state: State.ACTIVE, x: 1, y: 11 },\n      { x: 2, y: 12 },\n      { x: 3, y: 13 },\n      { state: State.END, x: 4, y: 14 },\n    ]);\n\n    expect(panHandlers.active).toBeCalledTimes(3);\n    expect(panHandlers.active).toHaveBeenLastCalledWith(\n      expect.objectContaining({ x: 3, y: 13 }),\n    );\n  });\n\n  it(\"fills BEGIN and END events for discrete handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<TapGesture>(getByGestureTestId(\"tap\"), [{ x: 5 }]);\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledTimes(1);\n  });\n\n  it(\"with FAILED event, fills BEGIN event for discrete handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<TapGesture>(getByGestureTestId(\"tap\"), [\n      { state: State.FAILED },\n    ]);\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledWith(expect.anything(), false);\n  });\n\n  it(\"uses event data from first event in filled BEGIN, ACTIVE events\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [{ x: 120 }]);\n    expect(handlers.begin).toBeCalledWith(expect.objectContaining({ x: 120 }));\n    expect(handlers.active).toHaveBeenNthCalledWith(\n      1,\n      expect.objectContaining({ x: 120 }),\n    );\n  });\n\n  it(\"uses event data from last event in filled END events\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { x: 120, state: State.FAILED },\n    ]);\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.active).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledWith(\n      expect.objectContaining({ x: 120 }),\n      false,\n    );\n  });\n\n  it(\"uses event data filled events\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { x: 5, y: 15 },\n      { x: 6, y: 16 },\n      { x: 7, y: 17 },\n    ]);\n    expect(handlers.begin).toBeCalledWith(\n      expect.objectContaining({ x: 5, y: 15 }),\n    );\n    expect(handlers.active).toBeCalledTimes(3);\n    expect(handlers.end).toBeCalledWith(\n      expect.objectContaining({ x: 7, y: 17 }),\n      true,\n    );\n  });\n\n  it(\"fills BEGIN and END events when they're not present, for discrete handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<TapGesture>(getByGestureTestId(\"tap\"));\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.end).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"fills BEGIN, ACTIVE and END events when they're not present, for continuous handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"));\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.active).toBeCalledTimes(1);\n    expect(handlers.end).toHaveBeenCalledTimes(1);\n  });\n});\n"],"mappings":"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","ignoreList":[]}