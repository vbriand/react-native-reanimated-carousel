{"version":3,"names":["useSharedValue","useAnimatedReaction","computeOffsetIfDataChanged","computeOffsetIfSizeChanged","handlerOffsetDirection","useCommonVariables","props","vertical","height","width","dataLength","defaultIndex","defaultScrollOffsetValue","loop","size","defaultHandlerOffsetValue","Math","abs","_handlerOffset","handlerOffset","prevDataLength","prevSize","previousLength","value","currentLength","isLengthChanged","shouldComputed","direction","previousSize","isSizeChanged","validLength"],"sources":["useCommonVariables.ts"],"sourcesContent":["import type Animated from \"react-native-reanimated\";\nimport { useSharedValue, useAnimatedReaction } from \"react-native-reanimated\";\n\nimport type { TInitializeCarouselProps } from \"./useInitProps\";\n\nimport { computeOffsetIfDataChanged } from \"../utils/compute-offset-if-data-changed\";\nimport { computeOffsetIfSizeChanged } from \"../utils/compute-offset-if-size-changed\";\nimport { handlerOffsetDirection } from \"../utils/handleroffset-direction\";\n\ninterface ICommonVariables {\n  size: number\n  validLength: number\n  handlerOffset: Animated.SharedValue<number>\n}\n\nexport function useCommonVariables(\n  props: TInitializeCarouselProps<any>,\n): ICommonVariables {\n  const {\n    vertical,\n    height,\n    width,\n    dataLength,\n    defaultIndex,\n    defaultScrollOffsetValue,\n    loop,\n  } = props;\n  const size = vertical ? height : width;\n  const defaultHandlerOffsetValue = -Math.abs(defaultIndex * size);\n  const _handlerOffset = useSharedValue<number>(defaultHandlerOffsetValue);\n  const handlerOffset = defaultScrollOffsetValue ?? _handlerOffset;\n  const prevDataLength = useSharedValue(dataLength);\n  const prevSize = useSharedValue(size);\n\n  /**\n   * When data changes, we need to compute new index for handlerOffset\n  */\n  useAnimatedReaction(() => {\n    const previousLength = prevDataLength.value;\n    const currentLength = dataLength;\n    const isLengthChanged = previousLength !== currentLength;\n    const shouldComputed = (isLengthChanged && loop);\n\n    if (shouldComputed)\n      prevDataLength.value = dataLength;\n\n    return {\n      shouldComputed,\n      previousLength,\n      currentLength,\n    };\n  }, ({ shouldComputed, previousLength, currentLength }) => {\n    if (shouldComputed) {\n      // direction -> 1 | -1\n      const direction = handlerOffsetDirection(handlerOffset);\n\n      handlerOffset.value = computeOffsetIfDataChanged({\n        direction,\n        previousLength,\n        currentLength,\n        size,\n        handlerOffset: handlerOffset.value,\n      });\n    }\n  }, [dataLength, loop]);\n\n  /**\n   * When size changes, we need to compute new index for handlerOffset\n  */\n  useAnimatedReaction(() => {\n    const previousSize = prevSize.value;\n    const isSizeChanged = previousSize !== size;\n    const shouldComputed = isSizeChanged;\n\n    if (shouldComputed)\n      prevSize.value = size;\n\n    return {\n      shouldComputed,\n      previousSize,\n      size,\n    };\n  }, ({ shouldComputed, previousSize, size }) => {\n    if (shouldComputed) {\n      handlerOffset.value = computeOffsetIfSizeChanged({\n        handlerOffset: handlerOffset.value,\n        prevSize: previousSize,\n        size,\n      });\n    }\n  }, [size]);\n\n  return {\n    size,\n    validLength: dataLength - 1,\n    handlerOffset,\n  };\n}\n"],"mappings":"AACA,SAASA,cAAc,EAAEC,mBAAmB,QAAQ,yBAAyB;AAI7E,SAASC,0BAA0B,QAAQ,yCAAyC;AACpF,SAASC,0BAA0B,QAAQ,yCAAyC;AACpF,SAASC,sBAAsB,QAAQ,kCAAkC;AAQzE,OAAO,SAASC,kBAAkBA,CAChCC,KAAoC,EAClB;EAClB,MAAM;IACJC,QAAQ;IACRC,MAAM;IACNC,KAAK;IACLC,UAAU;IACVC,YAAY;IACZC,wBAAwB;IACxBC;EACF,CAAC,GAAGP,KAAK;EACT,MAAMQ,IAAI,GAAGP,QAAQ,GAAGC,MAAM,GAAGC,KAAK;EACtC,MAAMM,yBAAyB,GAAG,CAACC,IAAI,CAACC,GAAG,CAACN,YAAY,GAAGG,IAAI,CAAC;EAChE,MAAMI,cAAc,GAAGlB,cAAc,CAASe,yBAAyB,CAAC;EACxE,MAAMI,aAAa,GAAGP,wBAAwB,IAAIM,cAAc;EAChE,MAAME,cAAc,GAAGpB,cAAc,CAACU,UAAU,CAAC;EACjD,MAAMW,QAAQ,GAAGrB,cAAc,CAACc,IAAI,CAAC;;EAErC;AACF;AACA;EACEb,mBAAmB,CAAC,MAAM;IACxB,MAAMqB,cAAc,GAAGF,cAAc,CAACG,KAAK;IAC3C,MAAMC,aAAa,GAAGd,UAAU;IAChC,MAAMe,eAAe,GAAGH,cAAc,KAAKE,aAAa;IACxD,MAAME,cAAc,GAAID,eAAe,IAAIZ,IAAK;IAEhD,IAAIa,cAAc,EAChBN,cAAc,CAACG,KAAK,GAAGb,UAAU;IAEnC,OAAO;MACLgB,cAAc;MACdJ,cAAc;MACdE;IACF,CAAC;EACH,CAAC,EAAE,CAAC;IAAEE,cAAc;IAAEJ,cAAc;IAAEE;EAAc,CAAC,KAAK;IACxD,IAAIE,cAAc,EAAE;MAClB;MACA,MAAMC,SAAS,GAAGvB,sBAAsB,CAACe,aAAa,CAAC;MAEvDA,aAAa,CAACI,KAAK,GAAGrB,0BAA0B,CAAC;QAC/CyB,SAAS;QACTL,cAAc;QACdE,aAAa;QACbV,IAAI;QACJK,aAAa,EAAEA,aAAa,CAACI;MAC/B,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACb,UAAU,EAAEG,IAAI,CAAC,CAAC;;EAEtB;AACF;AACA;EACEZ,mBAAmB,CAAC,MAAM;IACxB,MAAM2B,YAAY,GAAGP,QAAQ,CAACE,KAAK;IACnC,MAAMM,aAAa,GAAGD,YAAY,KAAKd,IAAI;IAC3C,MAAMY,cAAc,GAAGG,aAAa;IAEpC,IAAIH,cAAc,EAChBL,QAAQ,CAACE,KAAK,GAAGT,IAAI;IAEvB,OAAO;MACLY,cAAc;MACdE,YAAY;MACZd;IACF,CAAC;EACH,CAAC,EAAE,CAAC;IAAEY,cAAc;IAAEE,YAAY;IAAEd;EAAK,CAAC,KAAK;IAC7C,IAAIY,cAAc,EAAE;MAClBP,aAAa,CAACI,KAAK,GAAGpB,0BAA0B,CAAC;QAC/CgB,aAAa,EAAEA,aAAa,CAACI,KAAK;QAClCF,QAAQ,EAAEO,YAAY;QACtBd;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,OAAO;IACLA,IAAI;IACJgB,WAAW,EAAEpB,UAAU,GAAG,CAAC;IAC3BS;EACF,CAAC;AACH","ignoreList":[]}