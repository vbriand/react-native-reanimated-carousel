{"version":3,"names":["useRef","useDerivedValue","useVisibleRanges","options","total","viewSize","translation","windowSize","_windowSize","loop","cachedRanges","ranges","_cachedRanges$current","_cachedRanges$current2","positiveCount","Math","round","negativeCount","currentIndex","value","newRanges","negativeRange","positiveRange","isArraysEqual","current","a","b","length","every","index"],"sources":["useVisibleRanges.tsx"],"sourcesContent":["import { useRef } from \"react\";\nimport type Animated from \"react-native-reanimated\";\nimport { useDerivedValue } from \"react-native-reanimated\";\n\ntype Range = [number, number];\n\nexport interface VisibleRanges {\n  negativeRange: Range\n  positiveRange: Range\n}\n\nexport type IVisibleRanges = Animated.SharedValue<VisibleRanges>;\n\nexport function useVisibleRanges(options: {\n  total: number\n  viewSize: number\n  windowSize?: number\n  translation: Animated.SharedValue<number>\n  loop?: boolean\n}): IVisibleRanges {\n  const {\n    total = 0,\n    viewSize,\n    translation,\n    windowSize: _windowSize,\n    loop,\n  } = options;\n\n  const windowSize = _windowSize ?? total;\n  const cachedRanges = useRef<VisibleRanges>(null!);\n\n  const ranges = useDerivedValue(() => {\n    const positiveCount = Math.round(windowSize / 2);\n    const negativeCount = windowSize - positiveCount;\n\n    let currentIndex = Math.round(-translation.value / viewSize);\n    currentIndex = currentIndex < 0 ? (currentIndex % total) + total : currentIndex;\n\n    let newRanges: VisibleRanges;\n\n    if (!loop) {\n      // Adjusting negative range if the carousel is not loopable.\n      // So, It will be only displayed the positive items.\n      newRanges = {\n        negativeRange: [0 + currentIndex - (windowSize - 1), 0 + currentIndex],\n        positiveRange: [0 + currentIndex, currentIndex + (windowSize - 1)],\n      };\n    }\n    else {\n      const negativeRange: Range = [\n        (currentIndex - negativeCount + total) % total,\n        (currentIndex - 1 + total) % total,\n      ];\n\n      const positiveRange: Range = [\n        (currentIndex + total) % total,\n        (currentIndex + positiveCount + total) % total,\n      ];\n\n      if (negativeRange[0] < total && negativeRange[0] > negativeRange[1]) {\n        negativeRange[1] = total - 1;\n        positiveRange[0] = 0;\n      }\n      if (positiveRange[0] > positiveRange[1]) {\n        negativeRange[1] = total - 1;\n        positiveRange[0] = 0;\n      }\n\n      // console.log({ negativeRange, positiveRange ,total,windowSize,a:total <= _windowSize})\n      newRanges = { negativeRange, positiveRange };\n    }\n\n    if (\n      isArraysEqual(\n        cachedRanges.current?.negativeRange ?? [],\n        newRanges.negativeRange,\n      )\n      && isArraysEqual(\n        cachedRanges.current?.positiveRange ?? [],\n        newRanges.positiveRange,\n      )\n    )\n      return cachedRanges.current;\n\n    cachedRanges.current = newRanges;\n    return cachedRanges.current;\n  }, [loop, total, windowSize, translation]);\n\n  return ranges;\n}\n\nfunction isArraysEqual(a: number[], b: number[]): boolean {\n  \"worklet\";\n  if (a.length !== b.length) return false;\n\n  return a.every((value, index) => value === b[index]);\n}\n"],"mappings":"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","ignoreList":[]}